/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Management policy for a certificate.
    /// </summary>
    [DataContract]
    public partial class CertificatePolicy :  IEquatable<CertificatePolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatePolicy" /> class.
        /// </summary>
        /// <param name="KeyProps">Properties of the key backing a certificate..</param>
        /// <param name="SecretProps">Properties of the secret backing a certificate..</param>
        /// <param name="X509Props">Properties of the X509 component of a certificate..</param>
        /// <param name="LifetimeActions">Actions that will be performed by Key Vault over the lifetime of a certificate..</param>
        /// <param name="Issuer">Parameters for the issuer of the X509 component of a certificate..</param>
        /// <param name="Attributes">The certificate attributes..</param>
        public CertificatePolicy(KeyProperties KeyProps = default(KeyProperties), SecretProperties SecretProps = default(SecretProperties), X509CertificateProperties X509Props = default(X509CertificateProperties), List<LifetimeAction> LifetimeActions = default(List<LifetimeAction>), IssuerParameters Issuer = default(IssuerParameters), CertificateAttributes Attributes = default(CertificateAttributes))
        {
            this.KeyProps = KeyProps;
            this.SecretProps = SecretProps;
            this.X509Props = X509Props;
            this.LifetimeActions = LifetimeActions;
            this.Issuer = Issuer;
            this.Attributes = Attributes;
        }
        
        /// <summary>
        /// The certificate id.
        /// </summary>
        /// <value>The certificate id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Properties of the key backing a certificate.
        /// </summary>
        /// <value>Properties of the key backing a certificate.</value>
        [DataMember(Name="key_props", EmitDefaultValue=false)]
        public KeyProperties KeyProps { get; set; }

        /// <summary>
        /// Properties of the secret backing a certificate.
        /// </summary>
        /// <value>Properties of the secret backing a certificate.</value>
        [DataMember(Name="secret_props", EmitDefaultValue=false)]
        public SecretProperties SecretProps { get; set; }

        /// <summary>
        /// Properties of the X509 component of a certificate.
        /// </summary>
        /// <value>Properties of the X509 component of a certificate.</value>
        [DataMember(Name="x509_props", EmitDefaultValue=false)]
        public X509CertificateProperties X509Props { get; set; }

        /// <summary>
        /// Actions that will be performed by Key Vault over the lifetime of a certificate.
        /// </summary>
        /// <value>Actions that will be performed by Key Vault over the lifetime of a certificate.</value>
        [DataMember(Name="lifetime_actions", EmitDefaultValue=false)]
        public List<LifetimeAction> LifetimeActions { get; set; }

        /// <summary>
        /// Parameters for the issuer of the X509 component of a certificate.
        /// </summary>
        /// <value>Parameters for the issuer of the X509 component of a certificate.</value>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public IssuerParameters Issuer { get; set; }

        /// <summary>
        /// The certificate attributes.
        /// </summary>
        /// <value>The certificate attributes.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificatePolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeyProps: ").Append(KeyProps).Append("\n");
            sb.Append("  SecretProps: ").Append(SecretProps).Append("\n");
            sb.Append("  X509Props: ").Append(X509Props).Append("\n");
            sb.Append("  LifetimeActions: ").Append(LifetimeActions).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CertificatePolicy);
        }

        /// <summary>
        /// Returns true if CertificatePolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of CertificatePolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatePolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.KeyProps == other.KeyProps ||
                    this.KeyProps != null &&
                    this.KeyProps.Equals(other.KeyProps)
                ) && 
                (
                    this.SecretProps == other.SecretProps ||
                    this.SecretProps != null &&
                    this.SecretProps.Equals(other.SecretProps)
                ) && 
                (
                    this.X509Props == other.X509Props ||
                    this.X509Props != null &&
                    this.X509Props.Equals(other.X509Props)
                ) && 
                (
                    this.LifetimeActions == other.LifetimeActions ||
                    this.LifetimeActions != null &&
                    this.LifetimeActions.SequenceEqual(other.LifetimeActions)
                ) && 
                (
                    this.Issuer == other.Issuer ||
                    this.Issuer != null &&
                    this.Issuer.Equals(other.Issuer)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.KeyProps != null)
                    hash = hash * 59 + this.KeyProps.GetHashCode();
                if (this.SecretProps != null)
                    hash = hash * 59 + this.SecretProps.GetHashCode();
                if (this.X509Props != null)
                    hash = hash * 59 + this.X509Props.GetHashCode();
                if (this.LifetimeActions != null)
                    hash = hash * 59 + this.LifetimeActions.GetHashCode();
                if (this.Issuer != null)
                    hash = hash * 59 + this.Issuer.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
