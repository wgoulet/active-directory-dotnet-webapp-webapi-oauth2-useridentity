/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The certificate issuer list result.
    /// </summary>
    [DataContract]
    public partial class CertificateIssuerListResult :  IEquatable<CertificateIssuerListResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuerListResult" /> class.
        /// </summary>
        /// <param name="Value">A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers..</param>
        public CertificateIssuerListResult(List<CertificateIssuerItem> Value = default(List<CertificateIssuerItem>))
        {
            this.Value = Value;
        }
        
        /// <summary>
        /// A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers.
        /// </summary>
        /// <value>A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public List<CertificateIssuerItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of certificate issuers.
        /// </summary>
        /// <value>The URL to get the next set of certificate issuers.</value>
        [DataMember(Name="nextLink", EmitDefaultValue=false)]
        public string NextLink { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateIssuerListResult {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  NextLink: ").Append(NextLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CertificateIssuerListResult);
        }

        /// <summary>
        /// Returns true if CertificateIssuerListResult instances are equal
        /// </summary>
        /// <param name="other">Instance of CertificateIssuerListResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateIssuerListResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.SequenceEqual(other.Value)
                ) && 
                (
                    this.NextLink == other.NextLink ||
                    this.NextLink != null &&
                    this.NextLink.Equals(other.NextLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.NextLink != null)
                    hash = hash * 59 + this.NextLink.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
