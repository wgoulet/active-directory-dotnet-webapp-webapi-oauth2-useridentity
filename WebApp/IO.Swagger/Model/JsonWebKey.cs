/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
    /// </summary>
    [DataContract]
    public partial class JsonWebKey :  IEquatable<JsonWebKey>, IValidatableObject
    {
        /// <summary>
        /// JsonWebKey key type (kty).
        /// </summary>
        /// <value>JsonWebKey key type (kty).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KtyEnum
        {
            
            /// <summary>
            /// Enum EC for "EC"
            /// </summary>
            [EnumMember(Value = "EC")]
            EC,
            
            /// <summary>
            /// Enum ECHSM for "EC-HSM"
            /// </summary>
            [EnumMember(Value = "EC-HSM")]
            ECHSM,
            
            /// <summary>
            /// Enum RSA for "RSA"
            /// </summary>
            [EnumMember(Value = "RSA")]
            RSA,
            
            /// <summary>
            /// Enum RSAHSM for "RSA-HSM"
            /// </summary>
            [EnumMember(Value = "RSA-HSM")]
            RSAHSM,
            
            /// <summary>
            /// Enum Oct for "oct"
            /// </summary>
            [EnumMember(Value = "oct")]
            Oct
        }

        /// <summary>
        /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
        /// </summary>
        /// <value>Elliptic curve name. For valid values, see JsonWebKeyCurveName.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CrvEnum
        {
            
            /// <summary>
            /// Enum P256 for "P-256"
            /// </summary>
            [EnumMember(Value = "P-256")]
            P256,
            
            /// <summary>
            /// Enum P384 for "P-384"
            /// </summary>
            [EnumMember(Value = "P-384")]
            P384,
            
            /// <summary>
            /// Enum P521 for "P-521"
            /// </summary>
            [EnumMember(Value = "P-521")]
            P521,
            
            /// <summary>
            /// Enum SECP256K1 for "SECP256K1"
            /// </summary>
            [EnumMember(Value = "SECP256K1")]
            SECP256K1
        }

        /// <summary>
        /// JsonWebKey key type (kty).
        /// </summary>
        /// <value>JsonWebKey key type (kty).</value>
        [DataMember(Name="kty", EmitDefaultValue=false)]
        public KtyEnum? Kty { get; set; }
        /// <summary>
        /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
        /// </summary>
        /// <value>Elliptic curve name. For valid values, see JsonWebKeyCurveName.</value>
        [DataMember(Name="crv", EmitDefaultValue=false)]
        public CrvEnum? Crv { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonWebKey" /> class.
        /// </summary>
        /// <param name="Kid">Key identifier..</param>
        /// <param name="Kty">JsonWebKey key type (kty)..</param>
        /// <param name="KeyOps">KeyOps.</param>
        /// <param name="N">RSA modulus..</param>
        /// <param name="E">RSA public exponent..</param>
        /// <param name="D">RSA private exponent, or the D component of an EC private key..</param>
        /// <param name="Dp">RSA private key parameter..</param>
        /// <param name="Dq">RSA private key parameter..</param>
        /// <param name="Qi">RSA private key parameter..</param>
        /// <param name="P">RSA secret prime..</param>
        /// <param name="Q">RSA secret prime, with p &lt; q..</param>
        /// <param name="K">Symmetric key..</param>
        /// <param name="KeyHsm">HSM Token, used with &#39;Bring Your Own Key&#39;..</param>
        /// <param name="Crv">Elliptic curve name. For valid values, see JsonWebKeyCurveName..</param>
        /// <param name="X">X component of an EC public key..</param>
        /// <param name="Y">Y component of an EC public key..</param>
        public JsonWebKey(string Kid = default(string), KtyEnum? Kty = default(KtyEnum?), List<string> KeyOps = default(List<string>), string N = default(string), string E = default(string), string D = default(string), string Dp = default(string), string Dq = default(string), string Qi = default(string), string P = default(string), string Q = default(string), string K = default(string), string KeyHsm = default(string), CrvEnum? Crv = default(CrvEnum?), string X = default(string), string Y = default(string))
        {
            this.Kid = Kid;
            this.Kty = Kty;
            this.KeyOps = KeyOps;
            this.N = N;
            this.E = E;
            this.D = D;
            this.Dp = Dp;
            this.Dq = Dq;
            this.Qi = Qi;
            this.P = P;
            this.Q = Q;
            this.K = K;
            this.KeyHsm = KeyHsm;
            this.Crv = Crv;
            this.X = X;
            this.Y = Y;
        }
        
        /// <summary>
        /// Key identifier.
        /// </summary>
        /// <value>Key identifier.</value>
        [DataMember(Name="kid", EmitDefaultValue=false)]
        public string Kid { get; set; }


        /// <summary>
        /// Gets or Sets KeyOps
        /// </summary>
        [DataMember(Name="key_ops", EmitDefaultValue=false)]
        public List<string> KeyOps { get; set; }

        /// <summary>
        /// RSA modulus.
        /// </summary>
        /// <value>RSA modulus.</value>
        [DataMember(Name="n", EmitDefaultValue=false)]
        public string N { get; set; }

        /// <summary>
        /// RSA public exponent.
        /// </summary>
        /// <value>RSA public exponent.</value>
        [DataMember(Name="e", EmitDefaultValue=false)]
        public string E { get; set; }

        /// <summary>
        /// RSA private exponent, or the D component of an EC private key.
        /// </summary>
        /// <value>RSA private exponent, or the D component of an EC private key.</value>
        [DataMember(Name="d", EmitDefaultValue=false)]
        public string D { get; set; }

        /// <summary>
        /// RSA private key parameter.
        /// </summary>
        /// <value>RSA private key parameter.</value>
        [DataMember(Name="dp", EmitDefaultValue=false)]
        public string Dp { get; set; }

        /// <summary>
        /// RSA private key parameter.
        /// </summary>
        /// <value>RSA private key parameter.</value>
        [DataMember(Name="dq", EmitDefaultValue=false)]
        public string Dq { get; set; }

        /// <summary>
        /// RSA private key parameter.
        /// </summary>
        /// <value>RSA private key parameter.</value>
        [DataMember(Name="qi", EmitDefaultValue=false)]
        public string Qi { get; set; }

        /// <summary>
        /// RSA secret prime.
        /// </summary>
        /// <value>RSA secret prime.</value>
        [DataMember(Name="p", EmitDefaultValue=false)]
        public string P { get; set; }

        /// <summary>
        /// RSA secret prime, with p &lt; q.
        /// </summary>
        /// <value>RSA secret prime, with p &lt; q.</value>
        [DataMember(Name="q", EmitDefaultValue=false)]
        public string Q { get; set; }

        /// <summary>
        /// Symmetric key.
        /// </summary>
        /// <value>Symmetric key.</value>
        [DataMember(Name="k", EmitDefaultValue=false)]
        public string K { get; set; }

        /// <summary>
        /// HSM Token, used with &#39;Bring Your Own Key&#39;.
        /// </summary>
        /// <value>HSM Token, used with &#39;Bring Your Own Key&#39;.</value>
        [DataMember(Name="key_hsm", EmitDefaultValue=false)]
        public string KeyHsm { get; set; }


        /// <summary>
        /// X component of an EC public key.
        /// </summary>
        /// <value>X component of an EC public key.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public string X { get; set; }

        /// <summary>
        /// Y component of an EC public key.
        /// </summary>
        /// <value>Y component of an EC public key.</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public string Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonWebKey {\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  KeyOps: ").Append(KeyOps).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  E: ").Append(E).Append("\n");
            sb.Append("  D: ").Append(D).Append("\n");
            sb.Append("  Dp: ").Append(Dp).Append("\n");
            sb.Append("  Dq: ").Append(Dq).Append("\n");
            sb.Append("  Qi: ").Append(Qi).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  Q: ").Append(Q).Append("\n");
            sb.Append("  K: ").Append(K).Append("\n");
            sb.Append("  KeyHsm: ").Append(KeyHsm).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JsonWebKey);
        }

        /// <summary>
        /// Returns true if JsonWebKey instances are equal
        /// </summary>
        /// <param name="other">Instance of JsonWebKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonWebKey other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Kid == other.Kid ||
                    this.Kid != null &&
                    this.Kid.Equals(other.Kid)
                ) && 
                (
                    this.Kty == other.Kty ||
                    this.Kty != null &&
                    this.Kty.Equals(other.Kty)
                ) && 
                (
                    this.KeyOps == other.KeyOps ||
                    this.KeyOps != null &&
                    this.KeyOps.SequenceEqual(other.KeyOps)
                ) && 
                (
                    this.N == other.N ||
                    this.N != null &&
                    this.N.Equals(other.N)
                ) && 
                (
                    this.E == other.E ||
                    this.E != null &&
                    this.E.Equals(other.E)
                ) && 
                (
                    this.D == other.D ||
                    this.D != null &&
                    this.D.Equals(other.D)
                ) && 
                (
                    this.Dp == other.Dp ||
                    this.Dp != null &&
                    this.Dp.Equals(other.Dp)
                ) && 
                (
                    this.Dq == other.Dq ||
                    this.Dq != null &&
                    this.Dq.Equals(other.Dq)
                ) && 
                (
                    this.Qi == other.Qi ||
                    this.Qi != null &&
                    this.Qi.Equals(other.Qi)
                ) && 
                (
                    this.P == other.P ||
                    this.P != null &&
                    this.P.Equals(other.P)
                ) && 
                (
                    this.Q == other.Q ||
                    this.Q != null &&
                    this.Q.Equals(other.Q)
                ) && 
                (
                    this.K == other.K ||
                    this.K != null &&
                    this.K.Equals(other.K)
                ) && 
                (
                    this.KeyHsm == other.KeyHsm ||
                    this.KeyHsm != null &&
                    this.KeyHsm.Equals(other.KeyHsm)
                ) && 
                (
                    this.Crv == other.Crv ||
                    this.Crv != null &&
                    this.Crv.Equals(other.Crv)
                ) && 
                (
                    this.X == other.X ||
                    this.X != null &&
                    this.X.Equals(other.X)
                ) && 
                (
                    this.Y == other.Y ||
                    this.Y != null &&
                    this.Y.Equals(other.Y)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Kid != null)
                    hash = hash * 59 + this.Kid.GetHashCode();
                if (this.Kty != null)
                    hash = hash * 59 + this.Kty.GetHashCode();
                if (this.KeyOps != null)
                    hash = hash * 59 + this.KeyOps.GetHashCode();
                if (this.N != null)
                    hash = hash * 59 + this.N.GetHashCode();
                if (this.E != null)
                    hash = hash * 59 + this.E.GetHashCode();
                if (this.D != null)
                    hash = hash * 59 + this.D.GetHashCode();
                if (this.Dp != null)
                    hash = hash * 59 + this.Dp.GetHashCode();
                if (this.Dq != null)
                    hash = hash * 59 + this.Dq.GetHashCode();
                if (this.Qi != null)
                    hash = hash * 59 + this.Qi.GetHashCode();
                if (this.P != null)
                    hash = hash * 59 + this.P.GetHashCode();
                if (this.Q != null)
                    hash = hash * 59 + this.Q.GetHashCode();
                if (this.K != null)
                    hash = hash * 59 + this.K.GetHashCode();
                if (this.KeyHsm != null)
                    hash = hash * 59 + this.KeyHsm.GetHashCode();
                if (this.Crv != null)
                    hash = hash * 59 + this.Crv.GetHashCode();
                if (this.X != null)
                    hash = hash * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hash = hash * 59 + this.Y.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
