/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        SasDefinitionBundle DeleteSasDefinition (string storageAccountName, string sasDefinitionName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        ApiResponse<SasDefinitionBundle> DeleteSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a storage account. This operation requires the storage/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        StorageBundle DeleteStorageAccount (string storageAccountName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a storage account. This operation requires the storage/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        ApiResponse<StorageBundle> DeleteStorageAccountWithHttpInfo (string storageAccountName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        SasDefinitionBundle GetSasDefinition (string storageAccountName, string sasDefinitionName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        ApiResponse<SasDefinitionBundle> GetSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>SasDefinitionListResult</returns>
        SasDefinitionListResult GetSasDefinitions (string storageAccountName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SasDefinitionListResult</returns>
        ApiResponse<SasDefinitionListResult> GetSasDefinitionsWithHttpInfo (string storageAccountName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        StorageBundle GetStorageAccount (string storageAccountName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        ApiResponse<StorageBundle> GetStorageAccountWithHttpInfo (string storageAccountName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>StorageListResult</returns>
        StorageListResult GetStorageAccounts (string apiVersion, int? maxresults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of StorageListResult</returns>
        ApiResponse<StorageListResult> GetStorageAccountsWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        StorageBundle RegenerateStorageAccountKey (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        ApiResponse<StorageBundle> RegenerateStorageAccountKeyWithHttpInfo (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        SasDefinitionBundle SetSasDefinition (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        ApiResponse<SasDefinitionBundle> SetSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        StorageBundle SetStorageAccount (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        ApiResponse<StorageBundle> SetStorageAccountWithHttpInfo (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        SasDefinitionBundle UpdateSasDefinition (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        ApiResponse<SasDefinitionBundle> UpdateSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        StorageBundle UpdateStorageAccount (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        ApiResponse<StorageBundle> UpdateStorageAccountWithHttpInfo (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        System.Threading.Tasks.Task<SasDefinitionBundle> DeleteSasDefinitionAsync (string storageAccountName, string sasDefinitionName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> DeleteSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a storage account. This operation requires the storage/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        System.Threading.Tasks.Task<StorageBundle> DeleteStorageAccountAsync (string storageAccountName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a storage account. This operation requires the storage/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBundle>> DeleteStorageAccountAsyncWithHttpInfo (string storageAccountName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        System.Threading.Tasks.Task<SasDefinitionBundle> GetSasDefinitionAsync (string storageAccountName, string sasDefinitionName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> GetSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SasDefinitionListResult</returns>
        System.Threading.Tasks.Task<SasDefinitionListResult> GetSasDefinitionsAsync (string storageAccountName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SasDefinitionListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SasDefinitionListResult>> GetSasDefinitionsAsyncWithHttpInfo (string storageAccountName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        System.Threading.Tasks.Task<StorageBundle> GetStorageAccountAsync (string storageAccountName, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBundle>> GetStorageAccountAsyncWithHttpInfo (string storageAccountName, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of StorageListResult</returns>
        System.Threading.Tasks.Task<StorageListResult> GetStorageAccountsAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (StorageListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageListResult>> GetStorageAccountsAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        System.Threading.Tasks.Task<StorageBundle> RegenerateStorageAccountKeyAsync (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBundle>> RegenerateStorageAccountKeyAsyncWithHttpInfo (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        System.Threading.Tasks.Task<SasDefinitionBundle> SetSasDefinitionAsync (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> SetSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        System.Threading.Tasks.Task<StorageBundle> SetStorageAccountAsync (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBundle>> SetStorageAccountAsyncWithHttpInfo (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        System.Threading.Tasks.Task<SasDefinitionBundle> UpdateSasDefinitionAsync (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> UpdateSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        System.Threading.Tasks.Task<StorageBundle> UpdateStorageAccountAsync (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBundle>> UpdateStorageAccountAsyncWithHttpInfo (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageApi : IStorageApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        public SasDefinitionBundle DeleteSasDefinition (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = DeleteSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        public ApiResponse< SasDefinitionBundle > DeleteSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->DeleteSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->DeleteSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->DeleteSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        public async System.Threading.Tasks.Task<SasDefinitionBundle> DeleteSasDefinitionAsync (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = await DeleteSasDefinitionAsyncWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> DeleteSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->DeleteSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->DeleteSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->DeleteSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Deletes a storage account. This operation requires the storage/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        public StorageBundle DeleteStorageAccount (string storageAccountName, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = DeleteStorageAccountWithHttpInfo(storageAccountName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes a storage account. This operation requires the storage/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        public ApiResponse< StorageBundle > DeleteStorageAccountWithHttpInfo (string storageAccountName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->DeleteStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->DeleteStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Deletes a storage account. This operation requires the storage/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        public async System.Threading.Tasks.Task<StorageBundle> DeleteStorageAccountAsync (string storageAccountName, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = await DeleteStorageAccountAsyncWithHttpInfo(storageAccountName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deletes a storage account. This operation requires the storage/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBundle>> DeleteStorageAccountAsyncWithHttpInfo (string storageAccountName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->DeleteStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->DeleteStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        public SasDefinitionBundle GetSasDefinition (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = GetSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        public ApiResponse< SasDefinitionBundle > GetSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->GetSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        public async System.Threading.Tasks.Task<SasDefinitionBundle> GetSasDefinitionAsync (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = await GetSasDefinitionAsyncWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> GetSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->GetSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>SasDefinitionListResult</returns>
        public SasDefinitionListResult GetSasDefinitions (string storageAccountName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<SasDefinitionListResult> localVarResponse = GetSasDefinitionsWithHttpInfo(storageAccountName, apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SasDefinitionListResult</returns>
        public ApiResponse< SasDefinitionListResult > GetSasDefinitionsWithHttpInfo (string storageAccountName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetSasDefinitions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetSasDefinitions");

            var localVarPath = "/storage/{storage-account-name}/sas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSasDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionListResult)));
        }

        /// <summary>
        ///  List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SasDefinitionListResult</returns>
        public async System.Threading.Tasks.Task<SasDefinitionListResult> GetSasDefinitionsAsync (string storageAccountName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<SasDefinitionListResult> localVarResponse = await GetSasDefinitionsAsyncWithHttpInfo(storageAccountName, apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SasDefinitionListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SasDefinitionListResult>> GetSasDefinitionsAsyncWithHttpInfo (string storageAccountName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetSasDefinitions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetSasDefinitions");

            var localVarPath = "/storage/{storage-account-name}/sas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSasDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionListResult)));
        }

        /// <summary>
        ///  Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        public StorageBundle GetStorageAccount (string storageAccountName, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = GetStorageAccountWithHttpInfo(storageAccountName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        public ApiResponse< StorageBundle > GetStorageAccountWithHttpInfo (string storageAccountName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        public async System.Threading.Tasks.Task<StorageBundle> GetStorageAccountAsync (string storageAccountName, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = await GetStorageAccountAsyncWithHttpInfo(storageAccountName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets information about a specified storage account. This operation requires the storage/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBundle>> GetStorageAccountAsyncWithHttpInfo (string storageAccountName, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->GetStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>StorageListResult</returns>
        public StorageListResult GetStorageAccounts (string apiVersion, int? maxresults = null)
        {
             ApiResponse<StorageListResult> localVarResponse = GetStorageAccountsWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of StorageListResult</returns>
        public ApiResponse< StorageListResult > GetStorageAccountsWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetStorageAccounts");

            var localVarPath = "/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorageAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageListResult)));
        }

        /// <summary>
        ///  List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of StorageListResult</returns>
        public async System.Threading.Tasks.Task<StorageListResult> GetStorageAccountsAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<StorageListResult> localVarResponse = await GetStorageAccountsAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (StorageListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageListResult>> GetStorageAccountsAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->GetStorageAccounts");

            var localVarPath = "/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorageAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageListResult)));
        }

        /// <summary>
        ///  Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        public StorageBundle RegenerateStorageAccountKey (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = RegenerateStorageAccountKeyWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        public ApiResponse< StorageBundle > RegenerateStorageAccountKeyWithHttpInfo (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->RegenerateStorageAccountKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->RegenerateStorageAccountKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->RegenerateStorageAccountKey");

            var localVarPath = "/storage/{storage-account-name}/regeneratekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateStorageAccountKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        public async System.Threading.Tasks.Task<StorageBundle> RegenerateStorageAccountKeyAsync (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = await RegenerateStorageAccountKeyAsyncWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to regenerate storage account key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBundle>> RegenerateStorageAccountKeyAsyncWithHttpInfo (string storageAccountName, StorageAccountRegenerteKeyParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->RegenerateStorageAccountKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->RegenerateStorageAccountKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->RegenerateStorageAccountKey");

            var localVarPath = "/storage/{storage-account-name}/regeneratekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateStorageAccountKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        public SasDefinitionBundle SetSasDefinition (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = SetSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        public ApiResponse< SasDefinitionBundle > SetSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->SetSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        public async System.Threading.Tasks.Task<SasDefinitionBundle> SetSasDefinitionAsync (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = await SetSasDefinitionAsyncWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to create a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> SetSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->SetSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->SetSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        public StorageBundle SetStorageAccount (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = SetStorageAccountWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        public ApiResponse< StorageBundle > SetStorageAccountWithHttpInfo (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->SetStorageAccount");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->SetStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->SetStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        public async System.Threading.Tasks.Task<StorageBundle> SetStorageAccountAsync (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = await SetStorageAccountAsyncWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates or updates a new storage account. This operation requires the storage/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to create a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBundle>> SetStorageAccountAsyncWithHttpInfo (string storageAccountName, StorageAccountCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->SetStorageAccount");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->SetStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->SetStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SasDefinitionBundle</returns>
        public SasDefinitionBundle UpdateSasDefinition (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = UpdateSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SasDefinitionBundle</returns>
        public ApiResponse< SasDefinitionBundle > UpdateSasDefinitionWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->UpdateSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SasDefinitionBundle</returns>
        public async System.Threading.Tasks.Task<SasDefinitionBundle> UpdateSasDefinitionAsync (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<SasDefinitionBundle> localVarResponse = await UpdateSasDefinitionAsyncWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="sasDefinitionName">The name of the SAS definition.</param>
        /// <param name="parameters">The parameters to update a SAS definition.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SasDefinitionBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SasDefinitionBundle>> UpdateSasDefinitionAsyncWithHttpInfo (string storageAccountName, string sasDefinitionName, SasDefinitionUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'sasDefinitionName' is set
            if (sasDefinitionName == null)
                throw new ApiException(400, "Missing required parameter 'sasDefinitionName' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->UpdateSasDefinition");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->UpdateSasDefinition");

            var localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (sasDefinitionName != null) localVarPathParams.Add("sas-definition-name", Configuration.ApiClient.ParameterToString(sasDefinitionName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSasDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SasDefinitionBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SasDefinitionBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SasDefinitionBundle)));
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>StorageBundle</returns>
        public StorageBundle UpdateStorageAccount (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = UpdateStorageAccountWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of StorageBundle</returns>
        public ApiResponse< StorageBundle > UpdateStorageAccountWithHttpInfo (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->UpdateStorageAccount");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->UpdateStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->UpdateStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

        /// <summary>
        ///  Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of StorageBundle</returns>
        public async System.Threading.Tasks.Task<StorageBundle> UpdateStorageAccountAsync (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<StorageBundle> localVarResponse = await UpdateStorageAccountAsyncWithHttpInfo(storageAccountName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageAccountName">The name of the storage account.</param>
        /// <param name="parameters">The parameters to update a storage account.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (StorageBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBundle>> UpdateStorageAccountAsyncWithHttpInfo (string storageAccountName, StorageAccountUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'storageAccountName' is set
            if (storageAccountName == null)
                throw new ApiException(400, "Missing required parameter 'storageAccountName' when calling StorageApi->UpdateStorageAccount");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling StorageApi->UpdateStorageAccount");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling StorageApi->UpdateStorageAccount");

            var localVarPath = "/storage/{storage-account-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageAccountName != null) localVarPathParams.Add("storage-account-name", Configuration.ApiClient.ParameterToString(storageAccountName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBundle)));
        }

    }
}
