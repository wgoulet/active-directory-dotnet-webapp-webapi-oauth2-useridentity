/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Backs up the specified secret.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>BackupSecretResult</returns>
        BackupSecretResult BackupSecret (string secretName, string apiVersion);

        /// <summary>
        /// Backs up the specified secret.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of BackupSecretResult</returns>
        ApiResponse<BackupSecretResult> BackupSecretWithHttpInfo (string secretName, string apiVersion);
        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedSecretBundle</returns>
        DeletedSecretBundle DeleteSecret (string secretName, string apiVersion);

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedSecretBundle</returns>
        ApiResponse<DeletedSecretBundle> DeleteSecretWithHttpInfo (string secretName, string apiVersion);
        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        SecretBundle GetSecret (string secretName, string secretVersion, string apiVersion);

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        ApiResponse<SecretBundle> GetSecretWithHttpInfo (string secretName, string secretVersion, string apiVersion);
        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>SecretListResult</returns>
        SecretListResult GetSecretVersions (string secretName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SecretListResult</returns>
        ApiResponse<SecretListResult> GetSecretVersionsWithHttpInfo (string secretName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>SecretListResult</returns>
        SecretListResult GetSecrets (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SecretListResult</returns>
        ApiResponse<SecretListResult> GetSecretsWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        SecretBundle RestoreSecret (SecretRestoreParameters parameters, string apiVersion);

        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        ApiResponse<SecretBundle> RestoreSecretWithHttpInfo (SecretRestoreParameters parameters, string apiVersion);
        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        ///  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        SecretBundle SetSecret (string secretName, SecretSetParameters parameters, string apiVersion);

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        ///  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        ApiResponse<SecretBundle> SetSecretWithHttpInfo (string secretName, SecretSetParameters parameters, string apiVersion);
        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        SecretBundle UpdateSecret (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        ApiResponse<SecretBundle> UpdateSecretWithHttpInfo (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Backs up the specified secret.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of BackupSecretResult</returns>
        System.Threading.Tasks.Task<BackupSecretResult> BackupSecretAsync (string secretName, string apiVersion);

        /// <summary>
        /// Backs up the specified secret.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (BackupSecretResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupSecretResult>> BackupSecretAsyncWithHttpInfo (string secretName, string apiVersion);
        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedSecretBundle</returns>
        System.Threading.Tasks.Task<DeletedSecretBundle> DeleteSecretAsync (string secretName, string apiVersion);

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedSecretBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedSecretBundle>> DeleteSecretAsyncWithHttpInfo (string secretName, string apiVersion);
        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        System.Threading.Tasks.Task<SecretBundle> GetSecretAsync (string secretName, string secretVersion, string apiVersion);

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretBundle>> GetSecretAsyncWithHttpInfo (string secretName, string secretVersion, string apiVersion);
        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SecretListResult</returns>
        System.Threading.Tasks.Task<SecretListResult> GetSecretVersionsAsync (string secretName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SecretListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretListResult>> GetSecretVersionsAsyncWithHttpInfo (string secretName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SecretListResult</returns>
        System.Threading.Tasks.Task<SecretListResult> GetSecretsAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SecretListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretListResult>> GetSecretsAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        System.Threading.Tasks.Task<SecretBundle> RestoreSecretAsync (SecretRestoreParameters parameters, string apiVersion);

        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretBundle>> RestoreSecretAsyncWithHttpInfo (SecretRestoreParameters parameters, string apiVersion);
        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        ///  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        System.Threading.Tasks.Task<SecretBundle> SetSecretAsync (string secretName, SecretSetParameters parameters, string apiVersion);

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        ///  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretBundle>> SetSecretAsyncWithHttpInfo (string secretName, SecretSetParameters parameters, string apiVersion);
        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        System.Threading.Tasks.Task<SecretBundle> UpdateSecretAsync (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretBundle>> UpdateSecretAsyncWithHttpInfo (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecretsApi : ISecretsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecretsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecretsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Backs up the specified secret. Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>BackupSecretResult</returns>
        public BackupSecretResult BackupSecret (string secretName, string apiVersion)
        {
             ApiResponse<BackupSecretResult> localVarResponse = BackupSecretWithHttpInfo(secretName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Backs up the specified secret. Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of BackupSecretResult</returns>
        public ApiResponse< BackupSecretResult > BackupSecretWithHttpInfo (string secretName, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->BackupSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->BackupSecret");

            var localVarPath = "/secrets/{secret-name}/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackupSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackupSecretResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackupSecretResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackupSecretResult)));
        }

        /// <summary>
        /// Backs up the specified secret. Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of BackupSecretResult</returns>
        public async System.Threading.Tasks.Task<BackupSecretResult> BackupSecretAsync (string secretName, string apiVersion)
        {
             ApiResponse<BackupSecretResult> localVarResponse = await BackupSecretAsyncWithHttpInfo(secretName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Backs up the specified secret. Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (BackupSecretResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackupSecretResult>> BackupSecretAsyncWithHttpInfo (string secretName, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->BackupSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->BackupSecret");

            var localVarPath = "/secrets/{secret-name}/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackupSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackupSecretResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackupSecretResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackupSecretResult)));
        }

        /// <summary>
        /// Deletes a secret from a specified key vault. The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedSecretBundle</returns>
        public DeletedSecretBundle DeleteSecret (string secretName, string apiVersion)
        {
             ApiResponse<DeletedSecretBundle> localVarResponse = DeleteSecretWithHttpInfo(secretName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a secret from a specified key vault. The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedSecretBundle</returns>
        public ApiResponse< DeletedSecretBundle > DeleteSecretWithHttpInfo (string secretName, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->DeleteSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->DeleteSecret");

            var localVarPath = "/secrets/{secret-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedSecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedSecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedSecretBundle)));
        }

        /// <summary>
        /// Deletes a secret from a specified key vault. The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedSecretBundle</returns>
        public async System.Threading.Tasks.Task<DeletedSecretBundle> DeleteSecretAsync (string secretName, string apiVersion)
        {
             ApiResponse<DeletedSecretBundle> localVarResponse = await DeleteSecretAsyncWithHttpInfo(secretName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a secret from a specified key vault. The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedSecretBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedSecretBundle>> DeleteSecretAsyncWithHttpInfo (string secretName, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->DeleteSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->DeleteSecret");

            var localVarPath = "/secrets/{secret-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedSecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedSecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedSecretBundle)));
        }

        /// <summary>
        /// Get a specified secret from a given key vault. The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        public SecretBundle GetSecret (string secretName, string secretVersion, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = GetSecretWithHttpInfo(secretName, secretVersion, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specified secret from a given key vault. The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        public ApiResponse< SecretBundle > GetSecretWithHttpInfo (string secretName, string secretVersion, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->GetSecret");
            // verify the required parameter 'secretVersion' is set
            if (secretVersion == null)
                throw new ApiException(400, "Missing required parameter 'secretVersion' when calling SecretsApi->GetSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecret");

            var localVarPath = "/secrets/{secret-name}/{secret-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (secretVersion != null) localVarPathParams.Add("secret-version", Configuration.ApiClient.ParameterToString(secretVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Get a specified secret from a given key vault. The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        public async System.Threading.Tasks.Task<SecretBundle> GetSecretAsync (string secretName, string secretVersion, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = await GetSecretAsyncWithHttpInfo(secretName, secretVersion, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specified secret from a given key vault. The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretBundle>> GetSecretAsyncWithHttpInfo (string secretName, string secretVersion, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->GetSecret");
            // verify the required parameter 'secretVersion' is set
            if (secretVersion == null)
                throw new ApiException(400, "Missing required parameter 'secretVersion' when calling SecretsApi->GetSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecret");

            var localVarPath = "/secrets/{secret-name}/{secret-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (secretVersion != null) localVarPathParams.Add("secret-version", Configuration.ApiClient.ParameterToString(secretVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// List all versions of the specified secret. The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>SecretListResult</returns>
        public SecretListResult GetSecretVersions (string secretName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<SecretListResult> localVarResponse = GetSecretVersionsWithHttpInfo(secretName, apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all versions of the specified secret. The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SecretListResult</returns>
        public ApiResponse< SecretListResult > GetSecretVersionsWithHttpInfo (string secretName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->GetSecretVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecretVersions");

            var localVarPath = "/secrets/{secret-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecretVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretListResult)));
        }

        /// <summary>
        /// List all versions of the specified secret. The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SecretListResult</returns>
        public async System.Threading.Tasks.Task<SecretListResult> GetSecretVersionsAsync (string secretName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<SecretListResult> localVarResponse = await GetSecretVersionsAsyncWithHttpInfo(secretName, apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all versions of the specified secret. The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SecretListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretListResult>> GetSecretVersionsAsyncWithHttpInfo (string secretName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->GetSecretVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecretVersions");

            var localVarPath = "/secrets/{secret-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecretVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretListResult)));
        }

        /// <summary>
        /// List secrets in a specified key vault. The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>SecretListResult</returns>
        public SecretListResult GetSecrets (string apiVersion, int? maxresults = null)
        {
             ApiResponse<SecretListResult> localVarResponse = GetSecretsWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List secrets in a specified key vault. The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of SecretListResult</returns>
        public ApiResponse< SecretListResult > GetSecretsWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecrets");

            var localVarPath = "/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecrets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretListResult)));
        }

        /// <summary>
        /// List secrets in a specified key vault. The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of SecretListResult</returns>
        public async System.Threading.Tasks.Task<SecretListResult> GetSecretsAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<SecretListResult> localVarResponse = await GetSecretsAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List secrets in a specified key vault. The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (SecretListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretListResult>> GetSecretsAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->GetSecrets");

            var localVarPath = "/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecrets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretListResult)));
        }

        /// <summary>
        /// Restores a backed up secret to a vault. Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        public SecretBundle RestoreSecret (SecretRestoreParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = RestoreSecretWithHttpInfo(parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restores a backed up secret to a vault. Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        public ApiResponse< SecretBundle > RestoreSecretWithHttpInfo (SecretRestoreParameters parameters, string apiVersion)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->RestoreSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->RestoreSecret");

            var localVarPath = "/secrets/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Restores a backed up secret to a vault. Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        public async System.Threading.Tasks.Task<SecretBundle> RestoreSecretAsync (SecretRestoreParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = await RestoreSecretAsyncWithHttpInfo(parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restores a backed up secret to a vault. Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretBundle>> RestoreSecretAsyncWithHttpInfo (SecretRestoreParameters parameters, string apiVersion)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->RestoreSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->RestoreSecret");

            var localVarPath = "/secrets/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Sets a secret in a specified key vault.  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        public SecretBundle SetSecret (string secretName, SecretSetParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = SetSecretWithHttpInfo(secretName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets a secret in a specified key vault.  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        public ApiResponse< SecretBundle > SetSecretWithHttpInfo (string secretName, SecretSetParameters parameters, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->SetSecret");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->SetSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->SetSecret");

            var localVarPath = "/secrets/{secret-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Sets a secret in a specified key vault.  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        public async System.Threading.Tasks.Task<SecretBundle> SetSecretAsync (string secretName, SecretSetParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = await SetSecretAsyncWithHttpInfo(secretName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets a secret in a specified key vault.  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretBundle>> SetSecretAsyncWithHttpInfo (string secretName, SecretSetParameters parameters, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->SetSecret");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->SetSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->SetSecret");

            var localVarPath = "/secrets/{secret-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault. The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>SecretBundle</returns>
        public SecretBundle UpdateSecret (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = UpdateSecretWithHttpInfo(secretName, secretVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault. The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of SecretBundle</returns>
        public ApiResponse< SecretBundle > UpdateSecretWithHttpInfo (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'secretVersion' is set
            if (secretVersion == null)
                throw new ApiException(400, "Missing required parameter 'secretVersion' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->UpdateSecret");

            var localVarPath = "/secrets/{secret-name}/{secret-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (secretVersion != null) localVarPathParams.Add("secret-version", Configuration.ApiClient.ParameterToString(secretVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault. The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of SecretBundle</returns>
        public async System.Threading.Tasks.Task<SecretBundle> UpdateSecretAsync (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<SecretBundle> localVarResponse = await UpdateSecretAsyncWithHttpInfo(secretName, secretVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault. The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretName">The name of the secret.</param>
        /// <param name="secretVersion">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (SecretBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecretBundle>> UpdateSecretAsyncWithHttpInfo (string secretName, string secretVersion, SecretUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'secretName' is set
            if (secretName == null)
                throw new ApiException(400, "Missing required parameter 'secretName' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'secretVersion' is set
            if (secretVersion == null)
                throw new ApiException(400, "Missing required parameter 'secretVersion' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SecretsApi->UpdateSecret");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling SecretsApi->UpdateSecret");

            var localVarPath = "/secrets/{secret-name}/{secret-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secretName != null) localVarPathParams.Add("secret-name", Configuration.ApiClient.ParameterToString(secretName)); // path parameter
            if (secretVersion != null) localVarPathParams.Add("secret-version", Configuration.ApiClient.ParameterToString(secretVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecretBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecretBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecretBundle)));
        }

    }
}
