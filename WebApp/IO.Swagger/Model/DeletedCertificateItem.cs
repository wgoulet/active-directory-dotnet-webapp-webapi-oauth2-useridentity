/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The deleted certificate item containing metadata about the deleted certificate.
    /// </summary>
    [DataContract]
    public partial class DeletedCertificateItem : CertificateItem,  IEquatable<DeletedCertificateItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedCertificateItem" /> class.
        /// </summary>
        /// <param name="Id">Certificate identifier..</param>
        /// <param name="Attributes">The certificate management attributes..</param>
        /// <param name="Tags">Application specific metadata in the form of key-value pairs..</param>
        /// <param name="X5t">Thumbprint of the certificate..</param>
        public DeletedCertificateItem(string Id = default(string), CertificateAttributes Attributes = default(CertificateAttributes), Dictionary<string, string> Tags = default(Dictionary<string, string>), string X5t = default(string))
        {
            this.Id = Id;
            this.Attributes = Attributes;
            this.Tags = Tags;
            this.X5t = X5t;
        }
        
        /// <summary>
        /// Certificate identifier.
        /// </summary>
        /// <value>Certificate identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The certificate management attributes.
        /// </summary>
        /// <value>The certificate management attributes.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        /// <value>Application specific metadata in the form of key-value pairs.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public Dictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Thumbprint of the certificate.
        /// </summary>
        /// <value>Thumbprint of the certificate.</value>
        [DataMember(Name="x5t", EmitDefaultValue=false)]
        public string X5t { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletedCertificateItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  X5t: ").Append(X5t).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeletedCertificateItem);
        }

        /// <summary>
        /// Returns true if DeletedCertificateItem instances are equal
        /// </summary>
        /// <param name="other">Instance of DeletedCertificateItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletedCertificateItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.X5t == other.X5t ||
                    this.X5t != null &&
                    this.X5t.Equals(other.X5t)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.X5t != null)
                    hash = hash * 59 + this.X5t.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
