/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The subject alternate names of a X509 object.
    /// </summary>
    [DataContract]
    public partial class SubjectAlternativeNames :  IEquatable<SubjectAlternativeNames>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectAlternativeNames" /> class.
        /// </summary>
        /// <param name="Emails">Email addresses..</param>
        /// <param name="DnsNames">Domain names..</param>
        /// <param name="Upns">User principal names..</param>
        public SubjectAlternativeNames(List<string> Emails = default(List<string>), List<string> DnsNames = default(List<string>), List<string> Upns = default(List<string>))
        {
            this.Emails = Emails;
            this.DnsNames = DnsNames;
            this.Upns = Upns;
        }
        
        /// <summary>
        /// Email addresses.
        /// </summary>
        /// <value>Email addresses.</value>
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<string> Emails { get; set; }

        /// <summary>
        /// Domain names.
        /// </summary>
        /// <value>Domain names.</value>
        [DataMember(Name="dns_names", EmitDefaultValue=false)]
        public List<string> DnsNames { get; set; }

        /// <summary>
        /// User principal names.
        /// </summary>
        /// <value>User principal names.</value>
        [DataMember(Name="upns", EmitDefaultValue=false)]
        public List<string> Upns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubjectAlternativeNames {\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  DnsNames: ").Append(DnsNames).Append("\n");
            sb.Append("  Upns: ").Append(Upns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubjectAlternativeNames);
        }

        /// <summary>
        /// Returns true if SubjectAlternativeNames instances are equal
        /// </summary>
        /// <param name="other">Instance of SubjectAlternativeNames to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubjectAlternativeNames other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Emails == other.Emails ||
                    this.Emails != null &&
                    this.Emails.SequenceEqual(other.Emails)
                ) && 
                (
                    this.DnsNames == other.DnsNames ||
                    this.DnsNames != null &&
                    this.DnsNames.SequenceEqual(other.DnsNames)
                ) && 
                (
                    this.Upns == other.Upns ||
                    this.Upns != null &&
                    this.Upns.SequenceEqual(other.Upns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Emails != null)
                    hash = hash * 59 + this.Emails.GetHashCode();
                if (this.DnsNames != null)
                    hash = hash * 59 + this.DnsNames.GetHashCode();
                if (this.Upns != null)
                    hash = hash * 59 + this.Upns.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
