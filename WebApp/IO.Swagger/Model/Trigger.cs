/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A condition to be satisfied for an action to be executed.
    /// </summary>
    [DataContract]
    public partial class Trigger :  IEquatable<Trigger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trigger" /> class.
        /// </summary>
        /// <param name="LifetimePercentage">Percentage of lifetime at which to trigger. Value should be between 1 and 99..</param>
        /// <param name="DaysBeforeExpiry">Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27)..</param>
        public Trigger(int? LifetimePercentage = default(int?), int? DaysBeforeExpiry = default(int?))
        {
            this.LifetimePercentage = LifetimePercentage;
            this.DaysBeforeExpiry = DaysBeforeExpiry;
        }
        
        /// <summary>
        /// Percentage of lifetime at which to trigger. Value should be between 1 and 99.
        /// </summary>
        /// <value>Percentage of lifetime at which to trigger. Value should be between 1 and 99.</value>
        [DataMember(Name="lifetime_percentage", EmitDefaultValue=false)]
        public int? LifetimePercentage { get; set; }

        /// <summary>
        /// Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).
        /// </summary>
        /// <value>Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).</value>
        [DataMember(Name="days_before_expiry", EmitDefaultValue=false)]
        public int? DaysBeforeExpiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trigger {\n");
            sb.Append("  LifetimePercentage: ").Append(LifetimePercentage).Append("\n");
            sb.Append("  DaysBeforeExpiry: ").Append(DaysBeforeExpiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Trigger);
        }

        /// <summary>
        /// Returns true if Trigger instances are equal
        /// </summary>
        /// <param name="other">Instance of Trigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trigger other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LifetimePercentage == other.LifetimePercentage ||
                    this.LifetimePercentage != null &&
                    this.LifetimePercentage.Equals(other.LifetimePercentage)
                ) && 
                (
                    this.DaysBeforeExpiry == other.DaysBeforeExpiry ||
                    this.DaysBeforeExpiry != null &&
                    this.DaysBeforeExpiry.Equals(other.DaysBeforeExpiry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LifetimePercentage != null)
                    hash = hash * 59 + this.LifetimePercentage.GetHashCode();
                if (this.DaysBeforeExpiry != null)
                    hash = hash * 59 + this.DaysBeforeExpiry.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LifetimePercentage (int?) maximum
            if(this.LifetimePercentage > (int?)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LifetimePercentage, must be a value less than or equal to 99.", new [] { "LifetimePercentage" });
            }

            // LifetimePercentage (int?) minimum
            if(this.LifetimePercentage < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LifetimePercentage, must be a value greater than or equal to 1.", new [] { "LifetimePercentage" });
            }

            yield break;
        }
    }

}
