/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The certificate import parameters.
    /// </summary>
    [DataContract]
    public partial class CertificateImportParameters :  IEquatable<CertificateImportParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateImportParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateImportParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateImportParameters" /> class.
        /// </summary>
        /// <param name="Value">Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key. (required).</param>
        /// <param name="Pwd">If the private key in base64EncodedCertificate is encrypted, the password used for encryption..</param>
        /// <param name="Policy">The management policy for the certificate..</param>
        /// <param name="Attributes">The attributes of the certificate (optional)..</param>
        /// <param name="Tags">Application specific metadata in the form of key-value pairs..</param>
        public CertificateImportParameters(string Value = default(string), string Pwd = default(string), CertificatePolicy Policy = default(CertificatePolicy), CertificateAttributes Attributes = default(CertificateAttributes), Dictionary<string, string> Tags = default(Dictionary<string, string>))
        {
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for CertificateImportParameters and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.Pwd = Pwd;
            this.Policy = Policy;
            this.Attributes = Attributes;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
        /// </summary>
        /// <value>Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
        /// </summary>
        /// <value>If the private key in base64EncodedCertificate is encrypted, the password used for encryption.</value>
        [DataMember(Name="pwd", EmitDefaultValue=false)]
        public string Pwd { get; set; }

        /// <summary>
        /// The management policy for the certificate.
        /// </summary>
        /// <value>The management policy for the certificate.</value>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// The attributes of the certificate (optional).
        /// </summary>
        /// <value>The attributes of the certificate (optional).</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        /// <value>Application specific metadata in the form of key-value pairs.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public Dictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateImportParameters {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CertificateImportParameters);
        }

        /// <summary>
        /// Returns true if CertificateImportParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CertificateImportParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateImportParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Pwd == other.Pwd ||
                    this.Pwd != null &&
                    this.Pwd.Equals(other.Pwd)
                ) && 
                (
                    this.Policy == other.Policy ||
                    this.Policy != null &&
                    this.Policy.Equals(other.Policy)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Pwd != null)
                    hash = hash * 59 + this.Pwd.GetHashCode();
                if (this.Policy != null)
                    hash = hash * 59 + this.Policy.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
