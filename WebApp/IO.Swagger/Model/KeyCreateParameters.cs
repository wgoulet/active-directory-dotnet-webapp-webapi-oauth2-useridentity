/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The key create parameters.
    /// </summary>
    [DataContract]
    public partial class KeyCreateParameters :  IEquatable<KeyCreateParameters>, IValidatableObject
    {
        /// <summary>
        /// The type of key to create. For valid values, see JsonWebKeyType.
        /// </summary>
        /// <value>The type of key to create. For valid values, see JsonWebKeyType.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KtyEnum
        {
            
            /// <summary>
            /// Enum EC for "EC"
            /// </summary>
            [EnumMember(Value = "EC")]
            EC,
            
            /// <summary>
            /// Enum ECHSM for "EC-HSM"
            /// </summary>
            [EnumMember(Value = "EC-HSM")]
            ECHSM,
            
            /// <summary>
            /// Enum RSA for "RSA"
            /// </summary>
            [EnumMember(Value = "RSA")]
            RSA,
            
            /// <summary>
            /// Enum RSAHSM for "RSA-HSM"
            /// </summary>
            [EnumMember(Value = "RSA-HSM")]
            RSAHSM,
            
            /// <summary>
            /// Enum Oct for "oct"
            /// </summary>
            [EnumMember(Value = "oct")]
            Oct
        }


        /// <summary>
        /// JSON web key operations. For more information, see JsonWebKeyOperation.
        /// </summary>
        /// <value>JSON web key operations. For more information, see JsonWebKeyOperation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyOpsEnum
        {
            
            /// <summary>
            /// Enum Encrypt for "encrypt"
            /// </summary>
            [EnumMember(Value = "encrypt")]
            Encrypt,
            
            /// <summary>
            /// Enum Decrypt for "decrypt"
            /// </summary>
            [EnumMember(Value = "decrypt")]
            Decrypt,
            
            /// <summary>
            /// Enum Sign for "sign"
            /// </summary>
            [EnumMember(Value = "sign")]
            Sign,
            
            /// <summary>
            /// Enum Verify for "verify"
            /// </summary>
            [EnumMember(Value = "verify")]
            Verify,
            
            /// <summary>
            /// Enum WrapKey for "wrapKey"
            /// </summary>
            [EnumMember(Value = "wrapKey")]
            WrapKey,
            
            /// <summary>
            /// Enum UnwrapKey for "unwrapKey"
            /// </summary>
            [EnumMember(Value = "unwrapKey")]
            UnwrapKey
        }

        /// <summary>
        /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
        /// </summary>
        /// <value>Elliptic curve name. For valid values, see JsonWebKeyCurveName.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CrvEnum
        {
            
            /// <summary>
            /// Enum P256 for "P-256"
            /// </summary>
            [EnumMember(Value = "P-256")]
            P256,
            
            /// <summary>
            /// Enum P384 for "P-384"
            /// </summary>
            [EnumMember(Value = "P-384")]
            P384,
            
            /// <summary>
            /// Enum P521 for "P-521"
            /// </summary>
            [EnumMember(Value = "P-521")]
            P521,
            
            /// <summary>
            /// Enum SECP256K1 for "SECP256K1"
            /// </summary>
            [EnumMember(Value = "SECP256K1")]
            SECP256K1
        }

        /// <summary>
        /// The type of key to create. For valid values, see JsonWebKeyType.
        /// </summary>
        /// <value>The type of key to create. For valid values, see JsonWebKeyType.</value>
        [DataMember(Name="kty", EmitDefaultValue=false)]
        public KtyEnum? Kty { get; set; }
        /// <summary>
        /// Gets or Sets KeyOps
        /// </summary>
        [DataMember(Name="key_ops", EmitDefaultValue=false)]
        public List<KeyOpsEnum> KeyOps { get; set; }
        /// <summary>
        /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
        /// </summary>
        /// <value>Elliptic curve name. For valid values, see JsonWebKeyCurveName.</value>
        [DataMember(Name="crv", EmitDefaultValue=false)]
        public CrvEnum? Crv { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyCreateParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KeyCreateParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyCreateParameters" /> class.
        /// </summary>
        /// <param name="Kty">The type of key to create. For valid values, see JsonWebKeyType. (required).</param>
        /// <param name="KeySize">The key size in bytes. For example, 1024 or 2048..</param>
        /// <param name="KeyOps">KeyOps.</param>
        /// <param name="Attributes">Attributes.</param>
        /// <param name="Tags">Application specific metadata in the form of key-value pairs..</param>
        /// <param name="Crv">Elliptic curve name. For valid values, see JsonWebKeyCurveName..</param>
        public KeyCreateParameters(KtyEnum? Kty = default(KtyEnum?), int? KeySize = default(int?), List<KeyOpsEnum> KeyOps = default(List<KeyOpsEnum>), KeyAttributes Attributes = default(KeyAttributes), Dictionary<string, string> Tags = default(Dictionary<string, string>), CrvEnum? Crv = default(CrvEnum?))
        {
            // to ensure "Kty" is required (not null)
            if (Kty == null)
            {
                throw new InvalidDataException("Kty is a required property for KeyCreateParameters and cannot be null");
            }
            else
            {
                this.Kty = Kty;
            }
            this.KeySize = KeySize;
            this.KeyOps = KeyOps;
            this.Attributes = Attributes;
            this.Tags = Tags;
            this.Crv = Crv;
        }
        

        /// <summary>
        /// The key size in bytes. For example, 1024 or 2048.
        /// </summary>
        /// <value>The key size in bytes. For example, 1024 or 2048.</value>
        [DataMember(Name="key_size", EmitDefaultValue=false)]
        public int? KeySize { get; set; }


        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public KeyAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        /// <value>Application specific metadata in the form of key-value pairs.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public Dictionary<string, string> Tags { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyCreateParameters {\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  KeySize: ").Append(KeySize).Append("\n");
            sb.Append("  KeyOps: ").Append(KeyOps).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as KeyCreateParameters);
        }

        /// <summary>
        /// Returns true if KeyCreateParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of KeyCreateParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyCreateParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Kty == other.Kty ||
                    this.Kty != null &&
                    this.Kty.Equals(other.Kty)
                ) && 
                (
                    this.KeySize == other.KeySize ||
                    this.KeySize != null &&
                    this.KeySize.Equals(other.KeySize)
                ) && 
                (
                    this.KeyOps == other.KeyOps ||
                    this.KeyOps != null &&
                    this.KeyOps.SequenceEqual(other.KeyOps)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Crv == other.Crv ||
                    this.Crv != null &&
                    this.Crv.Equals(other.Crv)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Kty != null)
                    hash = hash * 59 + this.Kty.GetHashCode();
                if (this.KeySize != null)
                    hash = hash * 59 + this.KeySize.GetHashCode();
                if (this.KeyOps != null)
                    hash = hash * 59 + this.KeyOps.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Crv != null)
                    hash = hash * 59 + this.Crv.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Kty (string) minLength
            if(this.Kty != null && this.Kty.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Kty, length must be greater than 1.", new [] { "Kty" });
            }

            yield break;
        }
    }

}
