/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A certificate operation is returned in case of asynchronous requests.
    /// </summary>
    [DataContract]
    public partial class CertificateOperation :  IEquatable<CertificateOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateOperation" /> class.
        /// </summary>
        /// <param name="Issuer">Parameters for the issuer of the X509 component of a certificate..</param>
        /// <param name="Csr">The certificate signing request (CSR) that is being used in the certificate operation..</param>
        /// <param name="CancellationRequested">Indicates if cancellation was requested on the certificate operation..</param>
        /// <param name="Status">Status of the certificate operation..</param>
        /// <param name="StatusDetails">The status details of the certificate operation..</param>
        /// <param name="Error">Error encountered, if any, during the certificate operation..</param>
        /// <param name="Target">Location which contains the result of the certificate operation..</param>
        /// <param name="RequestId">Identifier for the certificate operation..</param>
        public CertificateOperation(IssuerParameters Issuer = default(IssuerParameters), byte[] Csr = default(byte[]), bool? CancellationRequested = default(bool?), string Status = default(string), string StatusDetails = default(string), Error Error = default(Error), string Target = default(string), string RequestId = default(string))
        {
            this.Issuer = Issuer;
            this.Csr = Csr;
            this.CancellationRequested = CancellationRequested;
            this.Status = Status;
            this.StatusDetails = StatusDetails;
            this.Error = Error;
            this.Target = Target;
            this.RequestId = RequestId;
        }
        
        /// <summary>
        /// The certificate id.
        /// </summary>
        /// <value>The certificate id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Parameters for the issuer of the X509 component of a certificate.
        /// </summary>
        /// <value>Parameters for the issuer of the X509 component of a certificate.</value>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public IssuerParameters Issuer { get; set; }

        /// <summary>
        /// The certificate signing request (CSR) that is being used in the certificate operation.
        /// </summary>
        /// <value>The certificate signing request (CSR) that is being used in the certificate operation.</value>
        [DataMember(Name="csr", EmitDefaultValue=false)]
        public byte[] Csr { get; set; }

        /// <summary>
        /// Indicates if cancellation was requested on the certificate operation.
        /// </summary>
        /// <value>Indicates if cancellation was requested on the certificate operation.</value>
        [DataMember(Name="cancellation_requested", EmitDefaultValue=false)]
        public bool? CancellationRequested { get; set; }

        /// <summary>
        /// Status of the certificate operation.
        /// </summary>
        /// <value>Status of the certificate operation.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The status details of the certificate operation.
        /// </summary>
        /// <value>The status details of the certificate operation.</value>
        [DataMember(Name="status_details", EmitDefaultValue=false)]
        public string StatusDetails { get; set; }

        /// <summary>
        /// Error encountered, if any, during the certificate operation.
        /// </summary>
        /// <value>Error encountered, if any, during the certificate operation.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public Error Error { get; set; }

        /// <summary>
        /// Location which contains the result of the certificate operation.
        /// </summary>
        /// <value>Location which contains the result of the certificate operation.</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Identifier for the certificate operation.
        /// </summary>
        /// <value>Identifier for the certificate operation.</value>
        [DataMember(Name="request_id", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateOperation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Csr: ").Append(Csr).Append("\n");
            sb.Append("  CancellationRequested: ").Append(CancellationRequested).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CertificateOperation);
        }

        /// <summary>
        /// Returns true if CertificateOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of CertificateOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateOperation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Issuer == other.Issuer ||
                    this.Issuer != null &&
                    this.Issuer.Equals(other.Issuer)
                ) && 
                (
                    this.Csr == other.Csr ||
                    this.Csr != null &&
                    this.Csr.Equals(other.Csr)
                ) && 
                (
                    this.CancellationRequested == other.CancellationRequested ||
                    this.CancellationRequested != null &&
                    this.CancellationRequested.Equals(other.CancellationRequested)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusDetails == other.StatusDetails ||
                    this.StatusDetails != null &&
                    this.StatusDetails.Equals(other.StatusDetails)
                ) && 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                ) && 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Issuer != null)
                    hash = hash * 59 + this.Issuer.GetHashCode();
                if (this.Csr != null)
                    hash = hash * 59 + this.Csr.GetHashCode();
                if (this.CancellationRequested != null)
                    hash = hash * 59 + this.CancellationRequested.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusDetails != null)
                    hash = hash * 59 + this.StatusDetails.GetHashCode();
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
