/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletedKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the public part of a deleted key.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedKeyBundle</returns>
        DeletedKeyBundle GetDeletedKey (string keyName, string apiVersion);

        /// <summary>
        /// Gets the public part of a deleted key.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedKeyBundle</returns>
        ApiResponse<DeletedKeyBundle> GetDeletedKeyWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>DeletedKeyListResult</returns>
        DeletedKeyListResult GetDeletedKeys (string apiVersion, int? maxresults = null);

        /// <summary>
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of DeletedKeyListResult</returns>
        ApiResponse<DeletedKeyListResult> GetDeletedKeysWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Permanently deletes the specified key.
        /// </summary>
        /// <remarks>
        /// The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns></returns>
        void PurgeDeletedKey (string keyName, string apiVersion);

        /// <summary>
        /// Permanently deletes the specified key.
        /// </summary>
        /// <remarks>
        /// The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeDeletedKeyWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Recovers the deleted key to its latest version.
        /// </summary>
        /// <remarks>
        /// The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle RecoverDeletedKey (string keyName, string apiVersion);

        /// <summary>
        /// Recovers the deleted key to its latest version.
        /// </summary>
        /// <remarks>
        /// The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> RecoverDeletedKeyWithHttpInfo (string keyName, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the public part of a deleted key.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedKeyBundle</returns>
        System.Threading.Tasks.Task<DeletedKeyBundle> GetDeletedKeyAsync (string keyName, string apiVersion);

        /// <summary>
        /// Gets the public part of a deleted key.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundle>> GetDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of DeletedKeyListResult</returns>
        System.Threading.Tasks.Task<DeletedKeyListResult> GetDeletedKeysAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedKeyListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedKeyListResult>> GetDeletedKeysAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Permanently deletes the specified key.
        /// </summary>
        /// <remarks>
        /// The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeDeletedKeyAsync (string keyName, string apiVersion);

        /// <summary>
        /// Permanently deletes the specified key.
        /// </summary>
        /// <remarks>
        /// The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Recovers the deleted key to its latest version.
        /// </summary>
        /// <remarks>
        /// The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> RecoverDeletedKeyAsync (string keyName, string apiVersion);

        /// <summary>
        /// Recovers the deleted key to its latest version.
        /// </summary>
        /// <remarks>
        /// The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> RecoverDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeletedKeysApi : IDeletedKeysApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedKeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeletedKeysApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedKeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeletedKeysApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedKeyBundle</returns>
        public DeletedKeyBundle GetDeletedKey (string keyName, string apiVersion)
        {
             ApiResponse<DeletedKeyBundle> localVarResponse = GetDeletedKeyWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedKeyBundle</returns>
        public ApiResponse< DeletedKeyBundle > GetDeletedKeyWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->GetDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->GetDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundle)));
        }

        /// <summary>
        /// Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedKeyBundle</returns>
        public async System.Threading.Tasks.Task<DeletedKeyBundle> GetDeletedKeyAsync (string keyName, string apiVersion)
        {
             ApiResponse<DeletedKeyBundle> localVarResponse = await GetDeletedKeyAsyncWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundle>> GetDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->GetDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->GetDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundle)));
        }

        /// <summary>
        /// Lists the deleted keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>DeletedKeyListResult</returns>
        public DeletedKeyListResult GetDeletedKeys (string apiVersion, int? maxresults = null)
        {
             ApiResponse<DeletedKeyListResult> localVarResponse = GetDeletedKeysWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the deleted keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of DeletedKeyListResult</returns>
        public ApiResponse< DeletedKeyListResult > GetDeletedKeysWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->GetDeletedKeys");

            var localVarPath = "/deletedkeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyListResult)));
        }

        /// <summary>
        /// Lists the deleted keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of DeletedKeyListResult</returns>
        public async System.Threading.Tasks.Task<DeletedKeyListResult> GetDeletedKeysAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<DeletedKeyListResult> localVarResponse = await GetDeletedKeysAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the deleted keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedKeyListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedKeyListResult>> GetDeletedKeysAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->GetDeletedKeys");

            var localVarPath = "/deletedkeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyListResult)));
        }

        /// <summary>
        /// Permanently deletes the specified key. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns></returns>
        public void PurgeDeletedKey (string keyName, string apiVersion)
        {
             PurgeDeletedKeyWithHttpInfo(keyName, apiVersion);
        }

        /// <summary>
        /// Permanently deletes the specified key. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PurgeDeletedKeyWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->PurgeDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->PurgeDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Permanently deletes the specified key. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeDeletedKeyAsync (string keyName, string apiVersion)
        {
             await PurgeDeletedKeyAsyncWithHttpInfo(keyName, apiVersion);

        }

        /// <summary>
        /// Permanently deletes the specified key. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PurgeDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->PurgeDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->PurgeDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Recovers the deleted key to its latest version. The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle RecoverDeletedKey (string keyName, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = RecoverDeletedKeyWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers the deleted key to its latest version. The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > RecoverDeletedKeyWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->RecoverDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->RecoverDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Recovers the deleted key to its latest version. The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> RecoverDeletedKeyAsync (string keyName, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await RecoverDeletedKeyAsyncWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recovers the deleted key to its latest version. The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the deleted key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> RecoverDeletedKeyAsyncWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling DeletedKeysApi->RecoverDeletedKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedKeysApi->RecoverDeletedKey");

            var localVarPath = "/deletedkeys/{key-name}/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverDeletedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

    }
}
