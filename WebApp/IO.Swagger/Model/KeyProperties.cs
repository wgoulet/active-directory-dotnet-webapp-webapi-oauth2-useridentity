/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Properties of the key pair backing a certificate.
    /// </summary>
    [DataContract]
    public partial class KeyProperties :  IEquatable<KeyProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyProperties" /> class.
        /// </summary>
        /// <param name="Exportable">Indicates if the private key can be exported..</param>
        /// <param name="Kty">The key type..</param>
        /// <param name="KeySize">The key size in bytes. For example;  1024 or 2048..</param>
        /// <param name="ReuseKey">Indicates if the same key pair will be used on certificate renewal..</param>
        public KeyProperties(bool? Exportable = default(bool?), string Kty = default(string), int? KeySize = default(int?), bool? ReuseKey = default(bool?))
        {
            this.Exportable = Exportable;
            this.Kty = Kty;
            this.KeySize = KeySize;
            this.ReuseKey = ReuseKey;
        }
        
        /// <summary>
        /// Indicates if the private key can be exported.
        /// </summary>
        /// <value>Indicates if the private key can be exported.</value>
        [DataMember(Name="exportable", EmitDefaultValue=false)]
        public bool? Exportable { get; set; }

        /// <summary>
        /// The key type.
        /// </summary>
        /// <value>The key type.</value>
        [DataMember(Name="kty", EmitDefaultValue=false)]
        public string Kty { get; set; }

        /// <summary>
        /// The key size in bytes. For example;  1024 or 2048.
        /// </summary>
        /// <value>The key size in bytes. For example;  1024 or 2048.</value>
        [DataMember(Name="key_size", EmitDefaultValue=false)]
        public int? KeySize { get; set; }

        /// <summary>
        /// Indicates if the same key pair will be used on certificate renewal.
        /// </summary>
        /// <value>Indicates if the same key pair will be used on certificate renewal.</value>
        [DataMember(Name="reuse_key", EmitDefaultValue=false)]
        public bool? ReuseKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyProperties {\n");
            sb.Append("  Exportable: ").Append(Exportable).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  KeySize: ").Append(KeySize).Append("\n");
            sb.Append("  ReuseKey: ").Append(ReuseKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as KeyProperties);
        }

        /// <summary>
        /// Returns true if KeyProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of KeyProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyProperties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Exportable == other.Exportable ||
                    this.Exportable != null &&
                    this.Exportable.Equals(other.Exportable)
                ) && 
                (
                    this.Kty == other.Kty ||
                    this.Kty != null &&
                    this.Kty.Equals(other.Kty)
                ) && 
                (
                    this.KeySize == other.KeySize ||
                    this.KeySize != null &&
                    this.KeySize.Equals(other.KeySize)
                ) && 
                (
                    this.ReuseKey == other.ReuseKey ||
                    this.ReuseKey != null &&
                    this.ReuseKey.Equals(other.ReuseKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Exportable != null)
                    hash = hash * 59 + this.Exportable.GetHashCode();
                if (this.Kty != null)
                    hash = hash * 59 + this.Kty.GetHashCode();
                if (this.KeySize != null)
                    hash = hash * 59 + this.KeySize.GetHashCode();
                if (this.ReuseKey != null)
                    hash = hash * 59 + this.ReuseKey.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
