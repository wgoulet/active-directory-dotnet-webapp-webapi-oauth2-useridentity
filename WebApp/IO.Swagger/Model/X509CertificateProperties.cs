/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Properties of the X509 component of a certificate.
    /// </summary>
    [DataContract]
    public partial class X509CertificateProperties :  IEquatable<X509CertificateProperties>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets KeyUsage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyUsageEnum
        {
            
            /// <summary>
            /// Enum DigitalSignature for "digitalSignature"
            /// </summary>
            [EnumMember(Value = "digitalSignature")]
            DigitalSignature,
            
            /// <summary>
            /// Enum NonRepudiation for "nonRepudiation"
            /// </summary>
            [EnumMember(Value = "nonRepudiation")]
            NonRepudiation,
            
            /// <summary>
            /// Enum KeyEncipherment for "keyEncipherment"
            /// </summary>
            [EnumMember(Value = "keyEncipherment")]
            KeyEncipherment,
            
            /// <summary>
            /// Enum DataEncipherment for "dataEncipherment"
            /// </summary>
            [EnumMember(Value = "dataEncipherment")]
            DataEncipherment,
            
            /// <summary>
            /// Enum KeyAgreement for "keyAgreement"
            /// </summary>
            [EnumMember(Value = "keyAgreement")]
            KeyAgreement,
            
            /// <summary>
            /// Enum KeyCertSign for "keyCertSign"
            /// </summary>
            [EnumMember(Value = "keyCertSign")]
            KeyCertSign,
            
            /// <summary>
            /// Enum CRLSign for "cRLSign"
            /// </summary>
            [EnumMember(Value = "cRLSign")]
            CRLSign,
            
            /// <summary>
            /// Enum EncipherOnly for "encipherOnly"
            /// </summary>
            [EnumMember(Value = "encipherOnly")]
            EncipherOnly,
            
            /// <summary>
            /// Enum DecipherOnly for "decipherOnly"
            /// </summary>
            [EnumMember(Value = "decipherOnly")]
            DecipherOnly
        }

        /// <summary>
        /// List of key usages.
        /// </summary>
        /// <value>List of key usages.</value>
        [DataMember(Name="key_usage", EmitDefaultValue=false)]
        public List<KeyUsageEnum> KeyUsage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="X509CertificateProperties" /> class.
        /// </summary>
        /// <param name="Subject">The subject name. Should be a valid X509 distinguished Name..</param>
        /// <param name="Ekus">The enhanced key usage..</param>
        /// <param name="Sans">The subject alternative names..</param>
        /// <param name="KeyUsage">List of key usages..</param>
        /// <param name="ValidityMonths">The duration that the ceritifcate is valid in months..</param>
        public X509CertificateProperties(string Subject = default(string), List<string> Ekus = default(List<string>), SubjectAlternativeNames Sans = default(SubjectAlternativeNames), List<KeyUsageEnum> KeyUsage = default(List<KeyUsageEnum>), int? ValidityMonths = default(int?))
        {
            this.Subject = Subject;
            this.Ekus = Ekus;
            this.Sans = Sans;
            this.KeyUsage = KeyUsage;
            this.ValidityMonths = ValidityMonths;
        }
        
        /// <summary>
        /// The subject name. Should be a valid X509 distinguished Name.
        /// </summary>
        /// <value>The subject name. Should be a valid X509 distinguished Name.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The enhanced key usage.
        /// </summary>
        /// <value>The enhanced key usage.</value>
        [DataMember(Name="ekus", EmitDefaultValue=false)]
        public List<string> Ekus { get; set; }

        /// <summary>
        /// The subject alternative names.
        /// </summary>
        /// <value>The subject alternative names.</value>
        [DataMember(Name="sans", EmitDefaultValue=false)]
        public SubjectAlternativeNames Sans { get; set; }


        /// <summary>
        /// The duration that the ceritifcate is valid in months.
        /// </summary>
        /// <value>The duration that the ceritifcate is valid in months.</value>
        [DataMember(Name="validity_months", EmitDefaultValue=false)]
        public int? ValidityMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class X509CertificateProperties {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Ekus: ").Append(Ekus).Append("\n");
            sb.Append("  Sans: ").Append(Sans).Append("\n");
            sb.Append("  KeyUsage: ").Append(KeyUsage).Append("\n");
            sb.Append("  ValidityMonths: ").Append(ValidityMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as X509CertificateProperties);
        }

        /// <summary>
        /// Returns true if X509CertificateProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of X509CertificateProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(X509CertificateProperties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Ekus == other.Ekus ||
                    this.Ekus != null &&
                    this.Ekus.SequenceEqual(other.Ekus)
                ) && 
                (
                    this.Sans == other.Sans ||
                    this.Sans != null &&
                    this.Sans.Equals(other.Sans)
                ) && 
                (
                    this.KeyUsage == other.KeyUsage ||
                    this.KeyUsage != null &&
                    this.KeyUsage.SequenceEqual(other.KeyUsage)
                ) && 
                (
                    this.ValidityMonths == other.ValidityMonths ||
                    this.ValidityMonths != null &&
                    this.ValidityMonths.Equals(other.ValidityMonths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.Ekus != null)
                    hash = hash * 59 + this.Ekus.GetHashCode();
                if (this.Sans != null)
                    hash = hash * 59 + this.Sans.GetHashCode();
                if (this.KeyUsage != null)
                    hash = hash * 59 + this.KeyUsage.GetHashCode();
                if (this.ValidityMonths != null)
                    hash = hash * 59 + this.ValidityMonths.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ValidityMonths (int?) minimum
            if(this.ValidityMonths < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValidityMonths, must be a value greater than or equal to 0.", new [] { "ValidityMonths" });
            }

            yield break;
        }
    }

}
