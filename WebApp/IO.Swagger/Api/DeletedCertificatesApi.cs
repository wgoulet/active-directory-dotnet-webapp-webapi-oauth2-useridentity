/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletedCertificatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedCertificateBundle</returns>
        DeletedCertificateBundle GetDeletedCertificate (string certificateName, string apiVersion);

        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedCertificateBundle</returns>
        ApiResponse<DeletedCertificateBundle> GetDeletedCertificateWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>DeletedCertificateListResult</returns>
        DeletedCertificateListResult GetDeletedCertificates (string apiVersion, int? maxresults = null);

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of DeletedCertificateListResult</returns>
        ApiResponse<DeletedCertificateListResult> GetDeletedCertificatesWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns></returns>
        void PurgeDeletedCertificate (string certificateName, string apiVersion);

        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeDeletedCertificateWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        CertificateBundle RecoverDeletedCertificate (string certificateName, string apiVersion);

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        ApiResponse<CertificateBundle> RecoverDeletedCertificateWithHttpInfo (string certificateName, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedCertificateBundle</returns>
        System.Threading.Tasks.Task<DeletedCertificateBundle> GetDeletedCertificateAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedCertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedCertificateBundle>> GetDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of DeletedCertificateListResult</returns>
        System.Threading.Tasks.Task<DeletedCertificateListResult> GetDeletedCertificatesAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedCertificateListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedCertificateListResult>> GetDeletedCertificatesAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeDeletedCertificateAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        System.Threading.Tasks.Task<CertificateBundle> RecoverDeletedCertificateAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> RecoverDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeletedCertificatesApi : IDeletedCertificatesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedCertificatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeletedCertificatesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedCertificatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeletedCertificatesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedCertificateBundle</returns>
        public DeletedCertificateBundle GetDeletedCertificate (string certificateName, string apiVersion)
        {
             ApiResponse<DeletedCertificateBundle> localVarResponse = GetDeletedCertificateWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedCertificateBundle</returns>
        public ApiResponse< DeletedCertificateBundle > GetDeletedCertificateWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->GetDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->GetDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateBundle)));
        }

        /// <summary>
        /// Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedCertificateBundle</returns>
        public async System.Threading.Tasks.Task<DeletedCertificateBundle> GetDeletedCertificateAsync (string certificateName, string apiVersion)
        {
             ApiResponse<DeletedCertificateBundle> localVarResponse = await GetDeletedCertificateAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedCertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedCertificateBundle>> GetDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->GetDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->GetDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateBundle)));
        }

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery. The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>DeletedCertificateListResult</returns>
        public DeletedCertificateListResult GetDeletedCertificates (string apiVersion, int? maxresults = null)
        {
             ApiResponse<DeletedCertificateListResult> localVarResponse = GetDeletedCertificatesWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery. The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of DeletedCertificateListResult</returns>
        public ApiResponse< DeletedCertificateListResult > GetDeletedCertificatesWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->GetDeletedCertificates");

            var localVarPath = "/deletedcertificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateListResult)));
        }

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery. The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of DeletedCertificateListResult</returns>
        public async System.Threading.Tasks.Task<DeletedCertificateListResult> GetDeletedCertificatesAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<DeletedCertificateListResult> localVarResponse = await GetDeletedCertificatesAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery. The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedCertificateListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedCertificateListResult>> GetDeletedCertificatesAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->GetDeletedCertificates");

            var localVarPath = "/deletedcertificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeletedCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateListResult)));
        }

        /// <summary>
        /// Permanently deletes the specified deleted certificate. The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns></returns>
        public void PurgeDeletedCertificate (string certificateName, string apiVersion)
        {
             PurgeDeletedCertificateWithHttpInfo(certificateName, apiVersion);
        }

        /// <summary>
        /// Permanently deletes the specified deleted certificate. The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PurgeDeletedCertificateWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->PurgeDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->PurgeDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Permanently deletes the specified deleted certificate. The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeDeletedCertificateAsync (string certificateName, string apiVersion)
        {
             await PurgeDeletedCertificateAsyncWithHttpInfo(certificateName, apiVersion);

        }

        /// <summary>
        /// Permanently deletes the specified deleted certificate. The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PurgeDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->PurgeDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->PurgeDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates. The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        public CertificateBundle RecoverDeletedCertificate (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = RecoverDeletedCertificateWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates. The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        public ApiResponse< CertificateBundle > RecoverDeletedCertificateWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->RecoverDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->RecoverDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates. The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        public async System.Threading.Tasks.Task<CertificateBundle> RecoverDeletedCertificateAsync (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = await RecoverDeletedCertificateAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates. The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the deleted certificate</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> RecoverDeletedCertificateAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling DeletedCertificatesApi->RecoverDeletedCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling DeletedCertificatesApi->RecoverDeletedCertificate");

            var localVarPath = "/deletedcertificates/{certificate-name}/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverDeletedCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

    }
}
