/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        /// <remarks>
        /// The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>BackupKeyResult</returns>
        BackupKeyResult BackupKey (string keyName, string apiVersion);

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        /// <remarks>
        /// The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of BackupKeyResult</returns>
        ApiResponse<BackupKeyResult> BackupKeyWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle CreateKey (string keyName, KeyCreateParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> CreateKeyWithHttpInfo (string keyName, KeyCreateParameters parameters, string apiVersion);
        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <remarks>
        /// The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        KeyOperationResult Decrypt (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <remarks>
        /// The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        ApiResponse<KeyOperationResult> DecryptWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedKeyBundle</returns>
        DeletedKeyBundle DeleteKey (string keyName, string apiVersion);

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedKeyBundle</returns>
        ApiResponse<DeletedKeyBundle> DeleteKeyWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
        /// </summary>
        /// <remarks>
        /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        KeyOperationResult Encrypt (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
        /// </summary>
        /// <remarks>
        /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        ApiResponse<KeyOperationResult> EncryptWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// Gets the public part of a stored key.
        /// </summary>
        /// <remarks>
        /// The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle GetKey (string keyName, string keyVersion, string apiVersion);

        /// <summary>
        /// Gets the public part of a stored key.
        /// </summary>
        /// <remarks>
        /// The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> GetKeyWithHttpInfo (string keyName, string keyVersion, string apiVersion);
        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>KeyListResult</returns>
        KeyListResult GetKeyVersions (string keyName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of KeyListResult</returns>
        ApiResponse<KeyListResult> GetKeyVersionsWithHttpInfo (string keyName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>KeyListResult</returns>
        KeyListResult GetKeys (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of KeyListResult</returns>
        ApiResponse<KeyListResult> GetKeysWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle ImportKey (string keyName, KeyImportParameters parameters, string apiVersion);

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> ImportKeyWithHttpInfo (string keyName, KeyImportParameters parameters, string apiVersion);
        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <remarks>
        /// Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle RestoreKey (KeyRestoreParameters parameters, string apiVersion);

        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <remarks>
        /// Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> RestoreKeyWithHttpInfo (KeyRestoreParameters parameters, string apiVersion);
        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <remarks>
        /// The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        KeyOperationResult Sign (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <remarks>
        /// The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        ApiResponse<KeyOperationResult> SignWithHttpInfo (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion);
        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
        /// </summary>
        /// <remarks>
        /// The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        KeyOperationResult UnwrapKey (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
        /// </summary>
        /// <remarks>
        /// The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        ApiResponse<KeyOperationResult> UnwrapKeyWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        KeyBundle UpdateKey (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        ApiResponse<KeyBundle> UpdateKeyWithHttpInfo (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <remarks>
        /// The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyVerifyResult</returns>
        KeyVerifyResult Verify (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion);

        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <remarks>
        /// The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyVerifyResult</returns>
        ApiResponse<KeyVerifyResult> VerifyWithHttpInfo (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion);
        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <remarks>
        /// The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        KeyOperationResult WrapKey (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <remarks>
        /// The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        ApiResponse<KeyOperationResult> WrapKeyWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        /// <remarks>
        /// The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of BackupKeyResult</returns>
        System.Threading.Tasks.Task<BackupKeyResult> BackupKeyAsync (string keyName, string apiVersion);

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        /// <remarks>
        /// The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (BackupKeyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupKeyResult>> BackupKeyAsyncWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> CreateKeyAsync (string keyName, KeyCreateParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> CreateKeyAsyncWithHttpInfo (string keyName, KeyCreateParameters parameters, string apiVersion);
        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <remarks>
        /// The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        System.Threading.Tasks.Task<KeyOperationResult> DecryptAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <remarks>
        /// The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> DecryptAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedKeyBundle</returns>
        System.Threading.Tasks.Task<DeletedKeyBundle> DeleteKeyAsync (string keyName, string apiVersion);

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundle>> DeleteKeyAsyncWithHttpInfo (string keyName, string apiVersion);
        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
        /// </summary>
        /// <remarks>
        /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        System.Threading.Tasks.Task<KeyOperationResult> EncryptAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
        /// </summary>
        /// <remarks>
        /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> EncryptAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// Gets the public part of a stored key.
        /// </summary>
        /// <remarks>
        /// The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> GetKeyAsync (string keyName, string keyVersion, string apiVersion);

        /// <summary>
        /// Gets the public part of a stored key.
        /// </summary>
        /// <remarks>
        /// The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> GetKeyAsyncWithHttpInfo (string keyName, string keyVersion, string apiVersion);
        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of KeyListResult</returns>
        System.Threading.Tasks.Task<KeyListResult> GetKeyVersionsAsync (string keyName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (KeyListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyListResult>> GetKeyVersionsAsyncWithHttpInfo (string keyName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of KeyListResult</returns>
        System.Threading.Tasks.Task<KeyListResult> GetKeysAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (KeyListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyListResult>> GetKeysAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> ImportKeyAsync (string keyName, KeyImportParameters parameters, string apiVersion);

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> ImportKeyAsyncWithHttpInfo (string keyName, KeyImportParameters parameters, string apiVersion);
        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <remarks>
        /// Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> RestoreKeyAsync (KeyRestoreParameters parameters, string apiVersion);

        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <remarks>
        /// Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> RestoreKeyAsyncWithHttpInfo (KeyRestoreParameters parameters, string apiVersion);
        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <remarks>
        /// The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        System.Threading.Tasks.Task<KeyOperationResult> SignAsync (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <remarks>
        /// The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> SignAsyncWithHttpInfo (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion);
        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
        /// </summary>
        /// <remarks>
        /// The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        System.Threading.Tasks.Task<KeyOperationResult> UnwrapKeyAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
        /// </summary>
        /// <remarks>
        /// The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> UnwrapKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        System.Threading.Tasks.Task<KeyBundle> UpdateKeyAsync (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyBundle>> UpdateKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <remarks>
        /// The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyVerifyResult</returns>
        System.Threading.Tasks.Task<KeyVerifyResult> VerifyAsync (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion);

        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <remarks>
        /// The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyVerifyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyVerifyResult>> VerifyAsyncWithHttpInfo (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion);
        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <remarks>
        /// The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        System.Threading.Tasks.Task<KeyOperationResult> WrapKeyAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);

        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <remarks>
        /// The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> WrapKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeysApi : IKeysApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeysApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeysApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>BackupKeyResult</returns>
        public BackupKeyResult BackupKey (string keyName, string apiVersion)
        {
             ApiResponse<BackupKeyResult> localVarResponse = BackupKeyWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of BackupKeyResult</returns>
        public ApiResponse< BackupKeyResult > BackupKeyWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->BackupKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->BackupKey");

            var localVarPath = "/keys/{key-name}/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackupKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackupKeyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackupKeyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackupKeyResult)));
        }

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of BackupKeyResult</returns>
        public async System.Threading.Tasks.Task<BackupKeyResult> BackupKeyAsync (string keyName, string apiVersion)
        {
             ApiResponse<BackupKeyResult> localVarResponse = await BackupKeyAsyncWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (BackupKeyResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackupKeyResult>> BackupKeyAsyncWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->BackupKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->BackupKey");

            var localVarPath = "/keys/{key-name}/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackupKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackupKeyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackupKeyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackupKeyResult)));
        }

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle CreateKey (string keyName, KeyCreateParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = CreateKeyWithHttpInfo(keyName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > CreateKeyWithHttpInfo (string keyName, KeyCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->CreateKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->CreateKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->CreateKey");

            var localVarPath = "/keys/{key-name}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> CreateKeyAsync (string keyName, KeyCreateParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await CreateKeyAsyncWithHttpInfo(keyName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name for the new key. The system will generate the version name for the new key.</param>
        /// <param name="parameters">The parameters to create a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> CreateKeyAsyncWithHttpInfo (string keyName, KeyCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->CreateKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->CreateKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->CreateKey");

            var localVarPath = "/keys/{key-name}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Decrypts a single block of encrypted data. The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        public KeyOperationResult Decrypt (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = DecryptWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypts a single block of encrypted data. The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        public ApiResponse< KeyOperationResult > DecryptWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Decrypt");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Decrypt");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Decrypt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Decrypt");

            var localVarPath = "/keys/{key-name}/{key-version}/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Decrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Decrypts a single block of encrypted data. The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        public async System.Threading.Tasks.Task<KeyOperationResult> DecryptAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = await DecryptAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypts a single block of encrypted data. The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the decryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> DecryptAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Decrypt");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Decrypt");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Decrypt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Decrypt");

            var localVarPath = "/keys/{key-name}/{key-version}/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Decrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedKeyBundle</returns>
        public DeletedKeyBundle DeleteKey (string keyName, string apiVersion)
        {
             ApiResponse<DeletedKeyBundle> localVarResponse = DeleteKeyWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedKeyBundle</returns>
        public ApiResponse< DeletedKeyBundle > DeleteKeyWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->DeleteKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->DeleteKey");

            var localVarPath = "/keys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundle)));
        }

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedKeyBundle</returns>
        public async System.Threading.Tasks.Task<DeletedKeyBundle> DeleteKeyAsync (string keyName, string apiVersion)
        {
             ApiResponse<DeletedKeyBundle> localVarResponse = await DeleteKeyAsyncWithHttpInfo(keyName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to delete.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedKeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedKeyBundle>> DeleteKeyAsyncWithHttpInfo (string keyName, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->DeleteKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->DeleteKey");

            var localVarPath = "/keys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedKeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedKeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedKeyBundle)));
        }

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault. The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        public KeyOperationResult Encrypt (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = EncryptWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault. The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        public ApiResponse< KeyOperationResult > EncryptWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Encrypt");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Encrypt");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Encrypt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Encrypt");

            var localVarPath = "/keys/{key-name}/{key-version}/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault. The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        public async System.Threading.Tasks.Task<KeyOperationResult> EncryptAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = await EncryptAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault. The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the encryption operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> EncryptAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Encrypt");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Encrypt");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Encrypt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Encrypt");

            var localVarPath = "/keys/{key-name}/{key-version}/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle GetKey (string keyName, string keyVersion, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = GetKeyWithHttpInfo(keyName, keyVersion, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > GetKeyWithHttpInfo (string keyName, string keyVersion, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->GetKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->GetKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKey");

            var localVarPath = "/keys/{key-name}/{key-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> GetKeyAsync (string keyName, string keyVersion, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await GetKeyAsyncWithHttpInfo(keyName, keyVersion, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key to get.</param>
        /// <param name="keyVersion">Adding the version parameter retrieves a specific version of a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> GetKeyAsyncWithHttpInfo (string keyName, string keyVersion, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->GetKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->GetKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKey");

            var localVarPath = "/keys/{key-name}/{key-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>KeyListResult</returns>
        public KeyListResult GetKeyVersions (string keyName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<KeyListResult> localVarResponse = GetKeyVersionsWithHttpInfo(keyName, apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of KeyListResult</returns>
        public ApiResponse< KeyListResult > GetKeyVersionsWithHttpInfo (string keyName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->GetKeyVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKeyVersions");

            var localVarPath = "/keys/{key-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeyVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyListResult)));
        }

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of KeyListResult</returns>
        public async System.Threading.Tasks.Task<KeyListResult> GetKeyVersionsAsync (string keyName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<KeyListResult> localVarResponse = await GetKeyVersionsAsyncWithHttpInfo(keyName, apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (KeyListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyListResult>> GetKeyVersionsAsyncWithHttpInfo (string keyName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->GetKeyVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKeyVersions");

            var localVarPath = "/keys/{key-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeyVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyListResult)));
        }

        /// <summary>
        /// List keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>KeyListResult</returns>
        public KeyListResult GetKeys (string apiVersion, int? maxresults = null)
        {
             ApiResponse<KeyListResult> localVarResponse = GetKeysWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of KeyListResult</returns>
        public ApiResponse< KeyListResult > GetKeysWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKeys");

            var localVarPath = "/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyListResult)));
        }

        /// <summary>
        /// List keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of KeyListResult</returns>
        public async System.Threading.Tasks.Task<KeyListResult> GetKeysAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<KeyListResult> localVarResponse = await GetKeysAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List keys in the specified vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (KeyListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyListResult>> GetKeysAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->GetKeys");

            var localVarPath = "/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyListResult)));
        }

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle ImportKey (string keyName, KeyImportParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = ImportKeyWithHttpInfo(keyName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > ImportKeyWithHttpInfo (string keyName, KeyImportParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->ImportKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->ImportKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->ImportKey");

            var localVarPath = "/keys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> ImportKeyAsync (string keyName, KeyImportParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await ImportKeyAsyncWithHttpInfo(keyName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">Name for the imported key.</param>
        /// <param name="parameters">The parameters to import a key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> ImportKeyAsyncWithHttpInfo (string keyName, KeyImportParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->ImportKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->ImportKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->ImportKey");

            var localVarPath = "/keys/{key-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle RestoreKey (KeyRestoreParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = RestoreKeyWithHttpInfo(parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > RestoreKeyWithHttpInfo (KeyRestoreParameters parameters, string apiVersion)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->RestoreKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->RestoreKey");

            var localVarPath = "/keys/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> RestoreKeyAsync (KeyRestoreParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await RestoreKeyAsyncWithHttpInfo(parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">The parameters to restore the key.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> RestoreKeyAsyncWithHttpInfo (KeyRestoreParameters parameters, string apiVersion)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->RestoreKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->RestoreKey");

            var localVarPath = "/keys/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Creates a signature from a digest using the specified key. The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        public KeyOperationResult Sign (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = SignWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signature from a digest using the specified key. The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        public ApiResponse< KeyOperationResult > SignWithHttpInfo (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Sign");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Sign");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Sign");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Sign");

            var localVarPath = "/keys/{key-name}/{key-version}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Creates a signature from a digest using the specified key. The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        public async System.Threading.Tasks.Task<KeyOperationResult> SignAsync (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = await SignAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a signature from a digest using the specified key. The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the signing operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> SignAsyncWithHttpInfo (string keyName, string keyVersion, KeySignParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Sign");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Sign");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Sign");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Sign");

            var localVarPath = "/keys/{key-name}/{key-version}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key. The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        public KeyOperationResult UnwrapKey (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = UnwrapKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key. The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        public ApiResponse< KeyOperationResult > UnwrapKeyWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->UnwrapKey");

            var localVarPath = "/keys/{key-name}/{key-version}/unwrapkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnwrapKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key. The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        public async System.Threading.Tasks.Task<KeyOperationResult> UnwrapKeyAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = await UnwrapKeyAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially used for wrapping that key. The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for the key operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> UnwrapKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->UnwrapKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->UnwrapKey");

            var localVarPath = "/keys/{key-name}/{key-version}/unwrapkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnwrapKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyBundle</returns>
        public KeyBundle UpdateKey (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = UpdateKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyBundle</returns>
        public ApiResponse< KeyBundle > UpdateKeyWithHttpInfo (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->UpdateKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->UpdateKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->UpdateKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->UpdateKey");

            var localVarPath = "/keys/{key-name}/{key-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyBundle</returns>
        public async System.Threading.Tasks.Task<KeyBundle> UpdateKeyAsync (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<KeyBundle> localVarResponse = await UpdateKeyAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of key to update.</param>
        /// <param name="keyVersion">The version of the key to update.</param>
        /// <param name="parameters">The parameters of the key to update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyBundle>> UpdateKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->UpdateKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->UpdateKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->UpdateKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->UpdateKey");

            var localVarPath = "/keys/{key-name}/{key-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyBundle)));
        }

        /// <summary>
        /// Verifies a signature using a specified key. The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyVerifyResult</returns>
        public KeyVerifyResult Verify (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion)
        {
             ApiResponse<KeyVerifyResult> localVarResponse = VerifyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a signature using a specified key. The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyVerifyResult</returns>
        public ApiResponse< KeyVerifyResult > VerifyWithHttpInfo (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Verify");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Verify");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Verify");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Verify");

            var localVarPath = "/keys/{key-name}/{key-version}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyVerifyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyVerifyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyVerifyResult)));
        }

        /// <summary>
        /// Verifies a signature using a specified key. The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyVerifyResult</returns>
        public async System.Threading.Tasks.Task<KeyVerifyResult> VerifyAsync (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion)
        {
             ApiResponse<KeyVerifyResult> localVarResponse = await VerifyAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies a signature using a specified key. The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for verify operations.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyVerifyResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyVerifyResult>> VerifyAsyncWithHttpInfo (string keyName, string keyVersion, KeyVerifyParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->Verify");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->Verify");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->Verify");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->Verify");

            var localVarPath = "/keys/{key-name}/{key-version}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyVerifyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyVerifyResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyVerifyResult)));
        }

        /// <summary>
        /// Wraps a symmetric key using a specified key. The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>KeyOperationResult</returns>
        public KeyOperationResult WrapKey (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = WrapKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wraps a symmetric key using a specified key. The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of KeyOperationResult</returns>
        public ApiResponse< KeyOperationResult > WrapKeyWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->WrapKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->WrapKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->WrapKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->WrapKey");

            var localVarPath = "/keys/{key-name}/{key-version}/wrapkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WrapKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

        /// <summary>
        /// Wraps a symmetric key using a specified key. The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of KeyOperationResult</returns>
        public async System.Threading.Tasks.Task<KeyOperationResult> WrapKeyAsync (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
             ApiResponse<KeyOperationResult> localVarResponse = await WrapKeyAsyncWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wraps a symmetric key using a specified key. The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">The name of the key.</param>
        /// <param name="keyVersion">The version of the key.</param>
        /// <param name="parameters">The parameters for wrap operation.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (KeyOperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyOperationResult>> WrapKeyAsyncWithHttpInfo (string keyName, string keyVersion, KeyOperationsParameters parameters, string apiVersion)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling KeysApi->WrapKey");
            // verify the required parameter 'keyVersion' is set
            if (keyVersion == null)
                throw new ApiException(400, "Missing required parameter 'keyVersion' when calling KeysApi->WrapKey");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling KeysApi->WrapKey");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling KeysApi->WrapKey");

            var localVarPath = "/keys/{key-name}/{key-version}/wrapkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyName != null) localVarPathParams.Add("key-name", Configuration.ApiClient.ParameterToString(keyName)); // path parameter
            if (keyVersion != null) localVarPathParams.Add("key-version", Configuration.ApiClient.ParameterToString(keyVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WrapKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyOperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyOperationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyOperationResult)));
        }

    }
}
