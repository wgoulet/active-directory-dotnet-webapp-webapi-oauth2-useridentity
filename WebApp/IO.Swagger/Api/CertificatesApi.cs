/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        CertificateOperation CreateCertificate (string certificateName, CertificateCreateParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        ApiResponse<CertificateOperation> CreateCertificateWithHttpInfo (string certificateName, CertificateCreateParameters parameters, string apiVersion);
        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedCertificateBundle</returns>
        DeletedCertificateBundle DeleteCertificate (string certificateName, string apiVersion);

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedCertificateBundle</returns>
        ApiResponse<DeletedCertificateBundle> DeleteCertificateWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        Contacts DeleteCertificateContacts (string apiVersion);

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> DeleteCertificateContactsWithHttpInfo (string apiVersion);
        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        IssuerBundle DeleteCertificateIssuer (string issuerName, string apiVersion);

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        ApiResponse<IssuerBundle> DeleteCertificateIssuerWithHttpInfo (string issuerName, string apiVersion);
        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        CertificateOperation DeleteCertificateOperation (string certificateName, string apiVersion);

        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        ApiResponse<CertificateOperation> DeleteCertificateOperationWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Gets information about a certificate.
        /// </summary>
        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        CertificateBundle GetCertificate (string certificateName, string certificateVersion, string apiVersion);

        /// <summary>
        /// Gets information about a certificate.
        /// </summary>
        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        ApiResponse<CertificateBundle> GetCertificateWithHttpInfo (string certificateName, string certificateVersion, string apiVersion);
        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        Contacts GetCertificateContacts (string apiVersion);

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> GetCertificateContactsWithHttpInfo (string apiVersion);
        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        IssuerBundle GetCertificateIssuer (string issuerName, string apiVersion);

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        ApiResponse<IssuerBundle> GetCertificateIssuerWithHttpInfo (string issuerName, string apiVersion);
        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateIssuerListResult</returns>
        CertificateIssuerListResult GetCertificateIssuers (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateIssuerListResult</returns>
        ApiResponse<CertificateIssuerListResult> GetCertificateIssuersWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>
        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        CertificateOperation GetCertificateOperation (string certificateName, string apiVersion);

        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>
        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        ApiResponse<CertificateOperation> GetCertificateOperationWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificatePolicy</returns>
        CertificatePolicy GetCertificatePolicy (string certificateName, string apiVersion);

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificatePolicy</returns>
        ApiResponse<CertificatePolicy> GetCertificatePolicyWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateListResult</returns>
        CertificateListResult GetCertificateVersions (string certificateName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateListResult</returns>
        ApiResponse<CertificateListResult> GetCertificateVersionsWithHttpInfo (string certificateName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateListResult</returns>
        CertificateListResult GetCertificates (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateListResult</returns>
        ApiResponse<CertificateListResult> GetCertificatesWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        CertificateBundle ImportCertificate (string certificateName, CertificateImportParameters parameters, string apiVersion);

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        ApiResponse<CertificateBundle> ImportCertificateWithHttpInfo (string certificateName, CertificateImportParameters parameters, string apiVersion);
        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        CertificateBundle MergeCertificate (string certificateName, CertificateMergeParameters parameters, string apiVersion);

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        ApiResponse<CertificateBundle> MergeCertificateWithHttpInfo (string certificateName, CertificateMergeParameters parameters, string apiVersion);
        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        Contacts SetCertificateContacts (Contacts contacts, string apiVersion);

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> SetCertificateContactsWithHttpInfo (Contacts contacts, string apiVersion);
        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        IssuerBundle SetCertificateIssuer (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion);

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        ApiResponse<IssuerBundle> SetCertificateIssuerWithHttpInfo (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion);
        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        CertificateBundle UpdateCertificate (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        ApiResponse<CertificateBundle> UpdateCertificateWithHttpInfo (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        IssuerBundle UpdateCertificateIssuer (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion);

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        ApiResponse<IssuerBundle> UpdateCertificateIssuerWithHttpInfo (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion);
        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        CertificateOperation UpdateCertificateOperation (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion);

        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        ApiResponse<CertificateOperation> UpdateCertificateOperationWithHttpInfo (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion);
        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificatePolicy</returns>
        CertificatePolicy UpdateCertificatePolicy (string certificateName, CertificatePolicy certificatePolicy, string apiVersion);

        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificatePolicy</returns>
        ApiResponse<CertificatePolicy> UpdateCertificatePolicyWithHttpInfo (string certificateName, CertificatePolicy certificatePolicy, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        System.Threading.Tasks.Task<CertificateOperation> CreateCertificateAsync (string certificateName, CertificateCreateParameters parameters, string apiVersion);

        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> CreateCertificateAsyncWithHttpInfo (string certificateName, CertificateCreateParameters parameters, string apiVersion);
        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedCertificateBundle</returns>
        System.Threading.Tasks.Task<DeletedCertificateBundle> DeleteCertificateAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedCertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedCertificateBundle>> DeleteCertificateAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> DeleteCertificateContactsAsync (string apiVersion);

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> DeleteCertificateContactsAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        System.Threading.Tasks.Task<IssuerBundle> DeleteCertificateIssuerAsync (string issuerName, string apiVersion);

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> DeleteCertificateIssuerAsyncWithHttpInfo (string issuerName, string apiVersion);
        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        System.Threading.Tasks.Task<CertificateOperation> DeleteCertificateOperationAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> DeleteCertificateOperationAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Gets information about a certificate.
        /// </summary>
        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        System.Threading.Tasks.Task<CertificateBundle> GetCertificateAsync (string certificateName, string certificateVersion, string apiVersion);

        /// <summary>
        /// Gets information about a certificate.
        /// </summary>
        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> GetCertificateAsyncWithHttpInfo (string certificateName, string certificateVersion, string apiVersion);
        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetCertificateContactsAsync (string apiVersion);

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetCertificateContactsAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        System.Threading.Tasks.Task<IssuerBundle> GetCertificateIssuerAsync (string issuerName, string apiVersion);

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> GetCertificateIssuerAsyncWithHttpInfo (string issuerName, string apiVersion);
        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateIssuerListResult</returns>
        System.Threading.Tasks.Task<CertificateIssuerListResult> GetCertificateIssuersAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateIssuerListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerListResult>> GetCertificateIssuersAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>
        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        System.Threading.Tasks.Task<CertificateOperation> GetCertificateOperationAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>
        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> GetCertificateOperationAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificatePolicy</returns>
        System.Threading.Tasks.Task<CertificatePolicy> GetCertificatePolicyAsync (string certificateName, string apiVersion);

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificatePolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificatePolicy>> GetCertificatePolicyAsyncWithHttpInfo (string certificateName, string apiVersion);
        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateListResult</returns>
        System.Threading.Tasks.Task<CertificateListResult> GetCertificateVersionsAsync (string certificateName, string apiVersion, int? maxresults = null);

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateListResult>> GetCertificateVersionsAsyncWithHttpInfo (string certificateName, string apiVersion, int? maxresults = null);
        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateListResult</returns>
        System.Threading.Tasks.Task<CertificateListResult> GetCertificatesAsync (string apiVersion, int? maxresults = null);

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateListResult>> GetCertificatesAsyncWithHttpInfo (string apiVersion, int? maxresults = null);
        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        System.Threading.Tasks.Task<CertificateBundle> ImportCertificateAsync (string certificateName, CertificateImportParameters parameters, string apiVersion);

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> ImportCertificateAsyncWithHttpInfo (string certificateName, CertificateImportParameters parameters, string apiVersion);
        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        System.Threading.Tasks.Task<CertificateBundle> MergeCertificateAsync (string certificateName, CertificateMergeParameters parameters, string apiVersion);

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> MergeCertificateAsyncWithHttpInfo (string certificateName, CertificateMergeParameters parameters, string apiVersion);
        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> SetCertificateContactsAsync (Contacts contacts, string apiVersion);

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> SetCertificateContactsAsyncWithHttpInfo (Contacts contacts, string apiVersion);
        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        System.Threading.Tasks.Task<IssuerBundle> SetCertificateIssuerAsync (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion);

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> SetCertificateIssuerAsyncWithHttpInfo (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion);
        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        System.Threading.Tasks.Task<CertificateBundle> UpdateCertificateAsync (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion);

        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> UpdateCertificateAsyncWithHttpInfo (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion);
        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        System.Threading.Tasks.Task<IssuerBundle> UpdateCertificateIssuerAsync (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion);

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> UpdateCertificateIssuerAsyncWithHttpInfo (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion);
        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        System.Threading.Tasks.Task<CertificateOperation> UpdateCertificateOperationAsync (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion);

        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> UpdateCertificateOperationAsyncWithHttpInfo (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion);
        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificatePolicy</returns>
        System.Threading.Tasks.Task<CertificatePolicy> UpdateCertificatePolicyAsync (string certificateName, CertificatePolicy certificatePolicy, string apiVersion);

        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificatePolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificatePolicy>> UpdateCertificatePolicyAsyncWithHttpInfo (string certificateName, CertificatePolicy certificatePolicy, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CertificatesApi : ICertificatesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificatesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CertificatesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        public CertificateOperation CreateCertificate (string certificateName, CertificateCreateParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = CreateCertificateWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        public ApiResponse< CertificateOperation > CreateCertificateWithHttpInfo (string certificateName, CertificateCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->CreateCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->CreateCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->CreateCertificate");

            var localVarPath = "/certificates/{certificate-name}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        public async System.Threading.Tasks.Task<CertificateOperation> CreateCertificateAsync (string certificateName, CertificateCreateParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = await CreateCertificateAsyncWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> CreateCertificateAsyncWithHttpInfo (string certificateName, CertificateCreateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->CreateCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->CreateCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->CreateCertificate");

            var localVarPath = "/certificates/{certificate-name}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Deletes a certificate from a specified key vault. Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>DeletedCertificateBundle</returns>
        public DeletedCertificateBundle DeleteCertificate (string certificateName, string apiVersion)
        {
             ApiResponse<DeletedCertificateBundle> localVarResponse = DeleteCertificateWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a certificate from a specified key vault. Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of DeletedCertificateBundle</returns>
        public ApiResponse< DeletedCertificateBundle > DeleteCertificateWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->DeleteCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificate");

            var localVarPath = "/certificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateBundle)));
        }

        /// <summary>
        /// Deletes a certificate from a specified key vault. Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of DeletedCertificateBundle</returns>
        public async System.Threading.Tasks.Task<DeletedCertificateBundle> DeleteCertificateAsync (string certificateName, string apiVersion)
        {
             ApiResponse<DeletedCertificateBundle> localVarResponse = await DeleteCertificateAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a certificate from a specified key vault. Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (DeletedCertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedCertificateBundle>> DeleteCertificateAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->DeleteCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificate");

            var localVarPath = "/certificates/{certificate-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedCertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletedCertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedCertificateBundle)));
        }

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault. Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        public Contacts DeleteCertificateContacts (string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = DeleteCertificateContactsWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault. Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public ApiResponse< Contacts > DeleteCertificateContactsWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault. Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> DeleteCertificateContactsAsync (string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = await DeleteCertificateContactsAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault. Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contacts>> DeleteCertificateContactsAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        public IssuerBundle DeleteCertificateIssuer (string issuerName, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = DeleteCertificateIssuerWithHttpInfo(issuerName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        public ApiResponse< IssuerBundle > DeleteCertificateIssuerWithHttpInfo (string issuerName, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->DeleteCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        public async System.Threading.Tasks.Task<IssuerBundle> DeleteCertificateIssuerAsync (string issuerName, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = await DeleteCertificateIssuerAsyncWithHttpInfo(issuerName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> DeleteCertificateIssuerAsyncWithHttpInfo (string issuerName, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->DeleteCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Deletes the creation operation for a specific certificate. Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        public CertificateOperation DeleteCertificateOperation (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = DeleteCertificateOperationWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the creation operation for a specific certificate. Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        public ApiResponse< CertificateOperation > DeleteCertificateOperationWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->DeleteCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Deletes the creation operation for a specific certificate. Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        public async System.Threading.Tasks.Task<CertificateOperation> DeleteCertificateOperationAsync (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = await DeleteCertificateOperationAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the creation operation for a specific certificate. Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> DeleteCertificateOperationAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->DeleteCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->DeleteCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Gets information about a certificate. Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        public CertificateBundle GetCertificate (string certificateName, string certificateVersion, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = GetCertificateWithHttpInfo(certificateName, certificateVersion, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a certificate. Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        public ApiResponse< CertificateBundle > GetCertificateWithHttpInfo (string certificateName, string certificateVersion, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificate");
            // verify the required parameter 'certificateVersion' is set
            if (certificateVersion == null)
                throw new ApiException(400, "Missing required parameter 'certificateVersion' when calling CertificatesApi->GetCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificate");

            var localVarPath = "/certificates/{certificate-name}/{certificate-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (certificateVersion != null) localVarPathParams.Add("certificate-version", Configuration.ApiClient.ParameterToString(certificateVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Gets information about a certificate. Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        public async System.Threading.Tasks.Task<CertificateBundle> GetCertificateAsync (string certificateName, string certificateVersion, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = await GetCertificateAsyncWithHttpInfo(certificateName, certificateVersion, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets information about a certificate. Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> GetCertificateAsyncWithHttpInfo (string certificateName, string certificateVersion, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificate");
            // verify the required parameter 'certificateVersion' is set
            if (certificateVersion == null)
                throw new ApiException(400, "Missing required parameter 'certificateVersion' when calling CertificatesApi->GetCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificate");

            var localVarPath = "/certificates/{certificate-name}/{certificate-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (certificateVersion != null) localVarPathParams.Add("certificate-version", Configuration.ApiClient.ParameterToString(certificateVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Lists the certificate contacts for a specified key vault. The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        public Contacts GetCertificateContacts (string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = GetCertificateContactsWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the certificate contacts for a specified key vault. The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public ApiResponse< Contacts > GetCertificateContactsWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Lists the certificate contacts for a specified key vault. The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetCertificateContactsAsync (string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = await GetCertificateContactsAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the certificate contacts for a specified key vault. The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contacts>> GetCertificateContactsAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Lists the specified certificate issuer. The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        public IssuerBundle GetCertificateIssuer (string issuerName, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = GetCertificateIssuerWithHttpInfo(issuerName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the specified certificate issuer. The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        public ApiResponse< IssuerBundle > GetCertificateIssuerWithHttpInfo (string issuerName, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->GetCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Lists the specified certificate issuer. The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        public async System.Threading.Tasks.Task<IssuerBundle> GetCertificateIssuerAsync (string issuerName, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = await GetCertificateIssuerAsyncWithHttpInfo(issuerName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the specified certificate issuer. The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> GetCertificateIssuerAsyncWithHttpInfo (string issuerName, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->GetCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// List certificate issuers for a specified key vault. The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateIssuerListResult</returns>
        public CertificateIssuerListResult GetCertificateIssuers (string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateIssuerListResult> localVarResponse = GetCertificateIssuersWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List certificate issuers for a specified key vault. The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateIssuerListResult</returns>
        public ApiResponse< CertificateIssuerListResult > GetCertificateIssuersWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateIssuers");

            var localVarPath = "/certificates/issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerListResult)));
        }

        /// <summary>
        /// List certificate issuers for a specified key vault. The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateIssuerListResult</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerListResult> GetCertificateIssuersAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateIssuerListResult> localVarResponse = await GetCertificateIssuersAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List certificate issuers for a specified key vault. The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateIssuerListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerListResult>> GetCertificateIssuersAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateIssuers");

            var localVarPath = "/certificates/issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerListResult)));
        }

        /// <summary>
        /// Gets the creation operation of a certificate. Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        public CertificateOperation GetCertificateOperation (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = GetCertificateOperationWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the creation operation of a certificate. Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        public ApiResponse< CertificateOperation > GetCertificateOperationWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Gets the creation operation of a certificate. Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        public async System.Threading.Tasks.Task<CertificateOperation> GetCertificateOperationAsync (string certificateName, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = await GetCertificateOperationAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the creation operation of a certificate. Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> GetCertificateOperationAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Lists the policy for a certificate. The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificatePolicy</returns>
        public CertificatePolicy GetCertificatePolicy (string certificateName, string apiVersion)
        {
             ApiResponse<CertificatePolicy> localVarResponse = GetCertificatePolicyWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the policy for a certificate. The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificatePolicy</returns>
        public ApiResponse< CertificatePolicy > GetCertificatePolicyWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificatePolicy");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificatePolicy");

            var localVarPath = "/certificates/{certificate-name}/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificatePolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificatePolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificatePolicy)));
        }

        /// <summary>
        /// Lists the policy for a certificate. The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificatePolicy</returns>
        public async System.Threading.Tasks.Task<CertificatePolicy> GetCertificatePolicyAsync (string certificateName, string apiVersion)
        {
             ApiResponse<CertificatePolicy> localVarResponse = await GetCertificatePolicyAsyncWithHttpInfo(certificateName, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the policy for a certificate. The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in a given key vault.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificatePolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificatePolicy>> GetCertificatePolicyAsyncWithHttpInfo (string certificateName, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificatePolicy");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificatePolicy");

            var localVarPath = "/certificates/{certificate-name}/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificatePolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificatePolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificatePolicy)));
        }

        /// <summary>
        /// List the versions of a certificate. The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateListResult</returns>
        public CertificateListResult GetCertificateVersions (string certificateName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateListResult> localVarResponse = GetCertificateVersionsWithHttpInfo(certificateName, apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the versions of a certificate. The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateListResult</returns>
        public ApiResponse< CertificateListResult > GetCertificateVersionsWithHttpInfo (string certificateName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificateVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateVersions");

            var localVarPath = "/certificates/{certificate-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateListResult)));
        }

        /// <summary>
        /// List the versions of a certificate. The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateListResult</returns>
        public async System.Threading.Tasks.Task<CertificateListResult> GetCertificateVersionsAsync (string certificateName, string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateListResult> localVarResponse = await GetCertificateVersionsAsyncWithHttpInfo(certificateName, apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the versions of a certificate. The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateListResult>> GetCertificateVersionsAsyncWithHttpInfo (string certificateName, string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->GetCertificateVersions");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificateVersions");

            var localVarPath = "/certificates/{certificate-name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateListResult)));
        }

        /// <summary>
        /// List certificates in a specified key vault The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>CertificateListResult</returns>
        public CertificateListResult GetCertificates (string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateListResult> localVarResponse = GetCertificatesWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List certificates in a specified key vault The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>ApiResponse of CertificateListResult</returns>
        public ApiResponse< CertificateListResult > GetCertificatesWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificates");

            var localVarPath = "/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateListResult)));
        }

        /// <summary>
        /// List certificates in a specified key vault The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of CertificateListResult</returns>
        public async System.Threading.Tasks.Task<CertificateListResult> GetCertificatesAsync (string apiVersion, int? maxresults = null)
        {
             ApiResponse<CertificateListResult> localVarResponse = await GetCertificatesAsyncWithHttpInfo(apiVersion, maxresults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List certificates in a specified key vault The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">Client API version.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateListResult>> GetCertificatesAsyncWithHttpInfo (string apiVersion, int? maxresults = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->GetCertificates");

            var localVarPath = "/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxresults != null) localVarQueryParams.Add("maxresults", Configuration.ApiClient.ParameterToString(maxresults)); // query parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateListResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateListResult)));
        }

        /// <summary>
        /// Imports a certificate into a specified key vault. Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        public CertificateBundle ImportCertificate (string certificateName, CertificateImportParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = ImportCertificateWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Imports a certificate into a specified key vault. Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        public ApiResponse< CertificateBundle > ImportCertificateWithHttpInfo (string certificateName, CertificateImportParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->ImportCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->ImportCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->ImportCertificate");

            var localVarPath = "/certificates/{certificate-name}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Imports a certificate into a specified key vault. Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        public async System.Threading.Tasks.Task<CertificateBundle> ImportCertificateAsync (string certificateName, CertificateImportParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = await ImportCertificateAsyncWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Imports a certificate into a specified key vault. Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> ImportCertificateAsyncWithHttpInfo (string certificateName, CertificateImportParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->ImportCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->ImportCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->ImportCertificate");

            var localVarPath = "/certificates/{certificate-name}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server. The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        public CertificateBundle MergeCertificate (string certificateName, CertificateMergeParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = MergeCertificateWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server. The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        public ApiResponse< CertificateBundle > MergeCertificateWithHttpInfo (string certificateName, CertificateMergeParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->MergeCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->MergeCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->MergeCertificate");

            var localVarPath = "/certificates/{certificate-name}/pending/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server. The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        public async System.Threading.Tasks.Task<CertificateBundle> MergeCertificateAsync (string certificateName, CertificateMergeParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = await MergeCertificateAsyncWithHttpInfo(certificateName, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server. The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> MergeCertificateAsyncWithHttpInfo (string certificateName, CertificateMergeParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->MergeCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->MergeCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->MergeCertificate");

            var localVarPath = "/certificates/{certificate-name}/pending/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Sets the certificate contacts for the specified key vault. Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Contacts</returns>
        public Contacts SetCertificateContacts (Contacts contacts, string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = SetCertificateContactsWithHttpInfo(contacts, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the certificate contacts for the specified key vault. Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public ApiResponse< Contacts > SetCertificateContactsWithHttpInfo (Contacts contacts, string apiVersion)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling CertificatesApi->SetCertificateContacts");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->SetCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (contacts != null && contacts.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contacts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contacts; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Sets the certificate contacts for the specified key vault. Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> SetCertificateContactsAsync (Contacts contacts, string apiVersion)
        {
             ApiResponse<Contacts> localVarResponse = await SetCertificateContactsAsyncWithHttpInfo(contacts, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the certificate contacts for the specified key vault. Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contacts>> SetCertificateContactsAsyncWithHttpInfo (Contacts contacts, string apiVersion)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling CertificatesApi->SetCertificateContacts");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->SetCertificateContacts");

            var localVarPath = "/certificates/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (contacts != null && contacts.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contacts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contacts; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCertificateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Sets the specified certificate issuer. The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        public IssuerBundle SetCertificateIssuer (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = SetCertificateIssuerWithHttpInfo(issuerName, _parameter, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the specified certificate issuer. The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        public ApiResponse< IssuerBundle > SetCertificateIssuerWithHttpInfo (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->SetCertificateIssuer");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling CertificatesApi->SetCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->SetCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (_parameter != null && _parameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_parameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _parameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Sets the specified certificate issuer. The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        public async System.Threading.Tasks.Task<IssuerBundle> SetCertificateIssuerAsync (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = await SetCertificateIssuerAsyncWithHttpInfo(issuerName, _parameter, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the specified certificate issuer. The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer set parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> SetCertificateIssuerAsyncWithHttpInfo (string issuerName, CertificateIssuerSetParameters _parameter, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->SetCertificateIssuer");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling CertificatesApi->SetCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->SetCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (_parameter != null && _parameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_parameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _parameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Updates the specified attributes associated with the given certificate. The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateBundle</returns>
        public CertificateBundle UpdateCertificate (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = UpdateCertificateWithHttpInfo(certificateName, certificateVersion, parameters, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified attributes associated with the given certificate. The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateBundle</returns>
        public ApiResponse< CertificateBundle > UpdateCertificateWithHttpInfo (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'certificateVersion' is set
            if (certificateVersion == null)
                throw new ApiException(400, "Missing required parameter 'certificateVersion' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificate");

            var localVarPath = "/certificates/{certificate-name}/{certificate-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (certificateVersion != null) localVarPathParams.Add("certificate-version", Configuration.ApiClient.ParameterToString(certificateVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Updates the specified attributes associated with the given certificate. The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateBundle</returns>
        public async System.Threading.Tasks.Task<CertificateBundle> UpdateCertificateAsync (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion)
        {
             ApiResponse<CertificateBundle> localVarResponse = await UpdateCertificateAsyncWithHttpInfo(certificateName, certificateVersion, parameters, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified attributes associated with the given certificate. The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given key vault.</param>
        /// <param name="certificateVersion">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateBundle>> UpdateCertificateAsyncWithHttpInfo (string certificateName, string certificateVersion, CertificateUpdateParameters parameters, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'certificateVersion' is set
            if (certificateVersion == null)
                throw new ApiException(400, "Missing required parameter 'certificateVersion' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling CertificatesApi->UpdateCertificate");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificate");

            var localVarPath = "/certificates/{certificate-name}/{certificate-version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (certificateVersion != null) localVarPathParams.Add("certificate-version", Configuration.ApiClient.ParameterToString(certificateVersion)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateBundle)));
        }

        /// <summary>
        /// Updates the specified certificate issuer. The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>IssuerBundle</returns>
        public IssuerBundle UpdateCertificateIssuer (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = UpdateCertificateIssuerWithHttpInfo(issuerName, _parameter, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified certificate issuer. The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of IssuerBundle</returns>
        public ApiResponse< IssuerBundle > UpdateCertificateIssuerWithHttpInfo (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->UpdateCertificateIssuer");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling CertificatesApi->UpdateCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (_parameter != null && _parameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_parameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _parameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Updates the specified certificate issuer. The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of IssuerBundle</returns>
        public async System.Threading.Tasks.Task<IssuerBundle> UpdateCertificateIssuerAsync (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion)
        {
             ApiResponse<IssuerBundle> localVarResponse = await UpdateCertificateIssuerAsyncWithHttpInfo(issuerName, _parameter, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified certificate issuer. The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerName">The name of the issuer.</param>
        /// <param name="_parameter">Certificate issuer update parameter.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (IssuerBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuerBundle>> UpdateCertificateIssuerAsyncWithHttpInfo (string issuerName, CertificateIssuerUpdateParameters _parameter, string apiVersion)
        {
            // verify the required parameter 'issuerName' is set
            if (issuerName == null)
                throw new ApiException(400, "Missing required parameter 'issuerName' when calling CertificatesApi->UpdateCertificateIssuer");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling CertificatesApi->UpdateCertificateIssuer");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificateIssuer");

            var localVarPath = "/certificates/issuers/{issuer-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issuerName != null) localVarPathParams.Add("issuer-name", Configuration.ApiClient.ParameterToString(issuerName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (_parameter != null && _parameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_parameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _parameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuerBundle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuerBundle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuerBundle)));
        }

        /// <summary>
        /// Updates a certificate operation. Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificateOperation</returns>
        public CertificateOperation UpdateCertificateOperation (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = UpdateCertificateOperationWithHttpInfo(certificateName, certificateOperation, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a certificate operation. Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificateOperation</returns>
        public ApiResponse< CertificateOperation > UpdateCertificateOperationWithHttpInfo (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificateOperation");
            // verify the required parameter 'certificateOperation' is set
            if (certificateOperation == null)
                throw new ApiException(400, "Missing required parameter 'certificateOperation' when calling CertificatesApi->UpdateCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (certificateOperation != null && certificateOperation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateOperation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateOperation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Updates a certificate operation. Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificateOperation</returns>
        public async System.Threading.Tasks.Task<CertificateOperation> UpdateCertificateOperationAsync (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion)
        {
             ApiResponse<CertificateOperation> localVarResponse = await UpdateCertificateOperationAsyncWithHttpInfo(certificateName, certificateOperation, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a certificate operation. Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificateOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateOperation>> UpdateCertificateOperationAsyncWithHttpInfo (string certificateName, CertificateOperationUpdateParameter certificateOperation, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificateOperation");
            // verify the required parameter 'certificateOperation' is set
            if (certificateOperation == null)
                throw new ApiException(400, "Missing required parameter 'certificateOperation' when calling CertificatesApi->UpdateCertificateOperation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificateOperation");

            var localVarPath = "/certificates/{certificate-name}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (certificateOperation != null && certificateOperation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateOperation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateOperation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateOperation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateOperation)));
        }

        /// <summary>
        /// Updates the policy for a certificate. Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>CertificatePolicy</returns>
        public CertificatePolicy UpdateCertificatePolicy (string certificateName, CertificatePolicy certificatePolicy, string apiVersion)
        {
             ApiResponse<CertificatePolicy> localVarResponse = UpdateCertificatePolicyWithHttpInfo(certificateName, certificatePolicy, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the policy for a certificate. Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>ApiResponse of CertificatePolicy</returns>
        public ApiResponse< CertificatePolicy > UpdateCertificatePolicyWithHttpInfo (string certificateName, CertificatePolicy certificatePolicy, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificatePolicy");
            // verify the required parameter 'certificatePolicy' is set
            if (certificatePolicy == null)
                throw new ApiException(400, "Missing required parameter 'certificatePolicy' when calling CertificatesApi->UpdateCertificatePolicy");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificatePolicy");

            var localVarPath = "/certificates/{certificate-name}/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (certificatePolicy != null && certificatePolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificatePolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificatePolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificatePolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificatePolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificatePolicy)));
        }

        /// <summary>
        /// Updates the policy for a certificate. Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of CertificatePolicy</returns>
        public async System.Threading.Tasks.Task<CertificatePolicy> UpdateCertificatePolicyAsync (string certificateName, CertificatePolicy certificatePolicy, string apiVersion)
        {
             ApiResponse<CertificatePolicy> localVarResponse = await UpdateCertificatePolicyAsyncWithHttpInfo(certificateName, certificatePolicy, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the policy for a certificate. Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateName">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="apiVersion">Client API version.</param>
        /// <returns>Task of ApiResponse (CertificatePolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificatePolicy>> UpdateCertificatePolicyAsyncWithHttpInfo (string certificateName, CertificatePolicy certificatePolicy, string apiVersion)
        {
            // verify the required parameter 'certificateName' is set
            if (certificateName == null)
                throw new ApiException(400, "Missing required parameter 'certificateName' when calling CertificatesApi->UpdateCertificatePolicy");
            // verify the required parameter 'certificatePolicy' is set
            if (certificatePolicy == null)
                throw new ApiException(400, "Missing required parameter 'certificatePolicy' when calling CertificatesApi->UpdateCertificatePolicy");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling CertificatesApi->UpdateCertificatePolicy");

            var localVarPath = "/certificates/{certificate-name}/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateName != null) localVarPathParams.Add("certificate-name", Configuration.ApiClient.ParameterToString(certificateName)); // path parameter
            if (apiVersion != null) localVarQueryParams.Add("api-version", Configuration.ApiClient.ParameterToString(apiVersion)); // query parameter
            if (certificatePolicy != null && certificatePolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificatePolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificatePolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificatePolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificatePolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificatePolicy)));
        }

    }
}
