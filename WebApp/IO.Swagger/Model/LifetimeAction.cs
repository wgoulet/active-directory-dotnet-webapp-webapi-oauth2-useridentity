/* 
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
    /// </summary>
    [DataContract]
    public partial class LifetimeAction :  IEquatable<LifetimeAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeAction" /> class.
        /// </summary>
        /// <param name="Trigger">The condition that will execute the action..</param>
        /// <param name="Action">The action that will be executed..</param>
        public LifetimeAction(Trigger Trigger = default(Trigger), Action Action = default(Action))
        {
            this.Trigger = Trigger;
            this.Action = Action;
        }
        
        /// <summary>
        /// The condition that will execute the action.
        /// </summary>
        /// <value>The condition that will execute the action.</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public Trigger Trigger { get; set; }

        /// <summary>
        /// The action that will be executed.
        /// </summary>
        /// <value>The action that will be executed.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public Action Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LifetimeAction {\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LifetimeAction);
        }

        /// <summary>
        /// Returns true if LifetimeAction instances are equal
        /// </summary>
        /// <param name="other">Instance of LifetimeAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LifetimeAction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Trigger == other.Trigger ||
                    this.Trigger != null &&
                    this.Trigger.Equals(other.Trigger)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Trigger != null)
                    hash = hash * 59 + this.Trigger.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
